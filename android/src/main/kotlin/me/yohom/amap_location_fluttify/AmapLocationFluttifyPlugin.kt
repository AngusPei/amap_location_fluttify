//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_location_fluttify

import android.os.Bundle
import android.util.Log
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel
import io.flutter.plugin.common.PluginRegistry.Registrar

// The stack that exists on the Dart side for a method call is enabled only when the MethodChannel passing parameters are limited
val STACK_AmapLocationFluttify = mutableMapOf<String, Any>()
// Container for Dart side random access objects
val HEAP_AmapLocationFluttify = mutableMapOf<Int, Any>()

@Suppress("FunctionName", "UsePropertyAccessSyntax", "RedundantUnitReturnType", "UNUSED_PARAMETER", "SpellCheckingInspection", "ConvertToStringTemplate", "DEPRECATION", "UNUSED_VARIABLE")
class AmapLocationFluttifyPlugin(private val registrar: Registrar): MethodChannel.MethodCallHandler {

    companion object {
        @JvmStatic
        fun registerWith(registrar: Registrar) {
            val channel = MethodChannel(registrar.messenger(), "me.yohom/amap_location_fluttify")
            channel.setMethodCallHandler(AmapLocationFluttifyPlugin(registrar))

            // register platform view
            
        }
    }

    private val handlerMap = mapOf<String, (Registrar, Map<String, Any>, MethodChannel.Result) -> Unit>(
        "com.autonavi.aps.amapapi.model.AMapLocationServer::toStr" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.autonavi.aps.amapapi.model.AMapLocationServer
        
            // print log
            println("fluttify-kotlin: com.autonavi.aps.amapapi.model.AMapLocationServer@$refId::toStr([])")
        
            // invoke native method
            val result = ref.toStr()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.LocationManagerBase::setLocationOption" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.AMapLocationClientOption
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::setLocationOption([])")
        
            // invoke native method
            ref.setLocationOption(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::setLocationListener" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::setLocationListener([])")
        
            // invoke native method
            ref.setLocationListener(object : com.amap.api.location.AMapLocationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.location.LocationManagerBase::setLocationListener::Callback")
        
                // call dart method
                override fun onLocationChanged(var1: com.amap.api.location.AMapLocation): Unit {
                    // print log
                    println("fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])")
        
                    // convert to jsonable data
                    val argvar1 = var1.apply { HEAP_AmapLocationFluttify[hashCode()] = this }.hashCode()
        
                    // call dart method
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.location.AMapLocationListener::onLocationChanged",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // method result
        
                }
        
            })
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::startLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::startLocation([])")
        
            // invoke native method
            ref.startLocation()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::stopLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::stopLocation([])")
        
            // invoke native method
            ref.stopLocation()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::getLastKnownLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::getLastKnownLocation([])")
        
            // invoke native method
            val result = ref.getLastKnownLocation()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.LocationManagerBase::startAssistantLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::startAssistantLocation([])")
        
            // invoke native method
            ref.startAssistantLocation()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::stopAssistantLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::stopAssistantLocation([])")
        
            // invoke native method
            ref.stopAssistantLocation()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::isStarted" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::isStarted([])")
        
            // invoke native method
            val result = ref.isStarted()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.LocationManagerBase::unRegisterLocationListener" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::unRegisterLocationListener([])")
        
            // invoke native method
            ref.unRegisterLocationListener(object : com.amap.api.location.AMapLocationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.location.LocationManagerBase::unRegisterLocationListener::Callback")
        
                // call dart method
                override fun onLocationChanged(var1: com.amap.api.location.AMapLocation): Unit {
                    // print log
                    println("fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])")
        
                    // convert to jsonable data
                    val argvar1 = var1.apply { HEAP_AmapLocationFluttify[hashCode()] = this }.hashCode()
        
                    // call dart method
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.location.AMapLocationListener::onLocationChanged",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // method result
        
                }
        
            })
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::onDestroy" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::onDestroy([])")
        
            // invoke native method
            ref.onDestroy()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::disableBackgroundLocation" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.LocationManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::disableBackgroundLocation([\"var1\":$var1])")
        
            // invoke native method
            ref.disableBackgroundLocation(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::setLocationOption" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.AMapLocationClientOption
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::setLocationOption([])")
        
            // invoke native method
            ref.setLocationOption(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::setLocationListener" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::setLocationListener([])")
        
            // invoke native method
            ref.setLocationListener(object : com.amap.api.location.AMapLocationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.location.AMapLocationClient::setLocationListener::Callback")
        
                // call dart method
                override fun onLocationChanged(var1: com.amap.api.location.AMapLocation): Unit {
                    // print log
                    println("fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])")
        
                    // convert to jsonable data
                    val argvar1 = var1.apply { HEAP_AmapLocationFluttify[hashCode()] = this }.hashCode()
        
                    // call dart method
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.location.AMapLocationListener::onLocationChanged",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // method result
        
                }
        
            })
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::startLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::startLocation([])")
        
            // invoke native method
            ref.startLocation()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::stopLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::stopLocation([])")
        
            // invoke native method
            ref.stopLocation()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::getLastKnownLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::getLastKnownLocation([])")
        
            // invoke native method
            val result = ref.getLastKnownLocation()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClient::startAssistantLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::startAssistantLocation([])")
        
            // invoke native method
            ref.startAssistantLocation()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::stopAssistantLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::stopAssistantLocation([])")
        
            // invoke native method
            ref.stopAssistantLocation()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::getVersion" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::getVersion([])")
        
            // invoke native method
            val result = ref.getVersion()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClient::setApiKey" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var0 = args["var0"] as String
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient::setApiKey([\"var0\":$var0])")
        
            // invoke native method
            com.amap.api.location.AMapLocationClient.setApiKey(var0)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::isStarted" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::isStarted([])")
        
            // invoke native method
            val result = ref.isStarted()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClient::unRegisterLocationListener" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::unRegisterLocationListener([])")
        
            // invoke native method
            ref.unRegisterLocationListener(object : com.amap.api.location.AMapLocationListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.location.AMapLocationClient::unRegisterLocationListener::Callback")
        
                // call dart method
                override fun onLocationChanged(var1: com.amap.api.location.AMapLocation): Unit {
                    // print log
                    println("fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])")
        
                    // convert to jsonable data
                    val argvar1 = var1.apply { HEAP_AmapLocationFluttify[hashCode()] = this }.hashCode()
        
                    // call dart method
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.location.AMapLocationListener::onLocationChanged",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // method result
        
                }
        
            })
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::onDestroy" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::onDestroy([])")
        
            // invoke native method
            ref.onDestroy()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::disableBackgroundLocation" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::disableBackgroundLocation([\"var1\":$var1])")
        
            // invoke native method
            ref.disableBackgroundLocation(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::getDeviceId" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var0 = HEAP_AmapLocationFluttify[args["var0"] as Int] as android.content.Context
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient::getDeviceId([])")
        
            // invoke native method
            val result = com.amap.api.location.AMapLocationClient.getDeviceId(var0)
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationListener::onLocationChanged" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.AMapLocation
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationListener
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationListener@$refId::onLocationChanged([])")
        
            // invoke native method
            ref.onLocationChanged(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.DPoint::getLongitude" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.DPoint
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.DPoint@$refId::getLongitude([])")
        
            // invoke native method
            val result = ref.getLongitude()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.DPoint::setLongitude" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.DPoint
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.DPoint@$refId::setLongitude([\"var1\":$var1])")
        
            // invoke native method
            ref.setLongitude(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.DPoint::getLatitude" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.DPoint
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.DPoint@$refId::getLatitude([])")
        
            // invoke native method
            val result = ref.getLatitude()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.DPoint::setLatitude" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.DPoint
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.DPoint@$refId::setLatitude([\"var1\":$var1])")
        
            // invoke native method
            ref.setLatitude(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.CoordinateConverter::from" to { registrar, args, methodResult ->
            // args
            // enum arg
            val var1 = com.amap.api.location.CoordinateConverter.CoordType.values()[args["var1"] as Int]
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.CoordinateConverter
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter@$refId::from([])")
        
            // invoke native method
            val result = ref.from(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.CoordinateConverter::coord" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.DPoint
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.CoordinateConverter
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter@$refId::coord([])")
        
            // invoke native method
            val result = ref.coord(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.CoordinateConverter::convert" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.CoordinateConverter
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter@$refId::convert([])")
        
            // invoke native method
            val result = ref.convert()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.CoordinateConverter::isAMapDataAvailable" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var0 = args["var0"] as Double
            // jsonable arg
            val var2 = args["var2"] as Double
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter::isAMapDataAvailable([\"var0\":$var0, \"var2\":$var2])")
        
            // invoke native method
            val result = com.amap.api.location.CoordinateConverter.isAMapDataAvailable(var0, var2)
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.CoordinateConverter::calculateLineDistance" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var0 = HEAP_AmapLocationFluttify[args["var0"] as Int] as com.amap.api.location.DPoint
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.DPoint
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter::calculateLineDistance([])")
        
            // invoke native method
            val result = com.amap.api.location.CoordinateConverter.calculateLineDistance(var0, var1)
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.CoordUtil::convertToGcj" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var0 = args["var0"] as DoubleArray
            // jsonable arg
            val var1 = args["var1"] as DoubleArray
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.CoordUtil::convertToGcj([\"var0\":$var0, \"var1\":$var1])")
        
            // invoke native method
            val result = com.amap.api.location.CoordUtil.convertToGcj(var0, var1)
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.CoordUtil::isLoadedSo" to { registrar, args, methodResult ->
            // args
        
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.CoordUtil::isLoadedSo([])")
        
            // invoke native method
            val result = com.amap.api.location.CoordUtil.isLoadedSo()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.CoordUtil::setLoadedSo" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var0 = args["var0"] as Boolean
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.CoordUtil::setLoadedSo([\"var0\":$var0])")
        
            // invoke native method
            com.amap.api.location.CoordUtil.setLoadedSo(var0)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol::getValue" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol@$refId::getValue([])")
        
            // invoke native method
            val result = ref.getValue()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.UmidtokenInfo::getUmidtoken" to { registrar, args, methodResult ->
            // args
        
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.UmidtokenInfo::getUmidtoken([])")
        
            // invoke native method
            val result = com.amap.api.location.UmidtokenInfo.getUmidtoken()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.UmidtokenInfo::setLocAble" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var0 = args["var0"] as Boolean
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.UmidtokenInfo::setLocAble([\"var0\":$var0])")
        
            // invoke native method
            com.amap.api.location.UmidtokenInfo.setLocAble(var0)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.UmidtokenInfo::setUmidtoken" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var0 = HEAP_AmapLocationFluttify[args["var0"] as Int] as android.content.Context
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.UmidtokenInfo::setUmidtoken([\"var1\":$var1])")
        
            // invoke native method
            com.amap.api.location.UmidtokenInfo.setUmidtoken(var0, var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getGpsAccuracyStatus" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getGpsAccuracyStatus([])")
        
            // invoke native method
            val result = ref.getGpsAccuracyStatus()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setGpsAccuracyStatus" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setGpsAccuracyStatus([\"var1\":$var1])")
        
            // invoke native method
            ref.setGpsAccuracyStatus(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getLocationType" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLocationType([])")
        
            // invoke native method
            val result = ref.getLocationType()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setLocationType" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLocationType([\"var1\":$var1])")
        
            // invoke native method
            ref.setLocationType(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getLocationDetail" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLocationDetail([])")
        
            // invoke native method
            val result = ref.getLocationDetail()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setLocationDetail" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLocationDetail([\"var1\":$var1])")
        
            // invoke native method
            ref.setLocationDetail(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getErrorCode" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getErrorCode([])")
        
            // invoke native method
            val result = ref.getErrorCode()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setErrorCode" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setErrorCode([\"var1\":$var1])")
        
            // invoke native method
            ref.setErrorCode(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getErrorInfo" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getErrorInfo([])")
        
            // invoke native method
            val result = ref.getErrorInfo()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setErrorInfo" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setErrorInfo([\"var1\":$var1])")
        
            // invoke native method
            ref.setErrorInfo(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getCountry" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getCountry([])")
        
            // invoke native method
            val result = ref.getCountry()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setCountry" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setCountry([\"var1\":$var1])")
        
            // invoke native method
            ref.setCountry(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getRoad" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getRoad([])")
        
            // invoke native method
            val result = ref.getRoad()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setRoad" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setRoad([\"var1\":$var1])")
        
            // invoke native method
            ref.setRoad(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getAddress" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAddress([])")
        
            // invoke native method
            val result = ref.getAddress()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setAddress" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setAddress([\"var1\":$var1])")
        
            // invoke native method
            ref.setAddress(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getProvince" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getProvince([])")
        
            // invoke native method
            val result = ref.getProvince()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setProvince" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setProvince([\"var1\":$var1])")
        
            // invoke native method
            ref.setProvince(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getCity" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getCity([])")
        
            // invoke native method
            val result = ref.getCity()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setCity" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setCity([\"var1\":$var1])")
        
            // invoke native method
            ref.setCity(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getDistrict" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getDistrict([])")
        
            // invoke native method
            val result = ref.getDistrict()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setDistrict" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setDistrict([\"var1\":$var1])")
        
            // invoke native method
            ref.setDistrict(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getCityCode" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getCityCode([])")
        
            // invoke native method
            val result = ref.getCityCode()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setCityCode" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setCityCode([\"var1\":$var1])")
        
            // invoke native method
            ref.setCityCode(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getAdCode" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAdCode([])")
        
            // invoke native method
            val result = ref.getAdCode()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setAdCode" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setAdCode([\"var1\":$var1])")
        
            // invoke native method
            ref.setAdCode(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getPoiName" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getPoiName([])")
        
            // invoke native method
            val result = ref.getPoiName()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setPoiName" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setPoiName([\"var1\":$var1])")
        
            // invoke native method
            ref.setPoiName(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getLatitude" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLatitude([])")
        
            // invoke native method
            val result = ref.getLatitude()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setLatitude" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLatitude([\"var1\":$var1])")
        
            // invoke native method
            ref.setLatitude(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getLongitude" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLongitude([])")
        
            // invoke native method
            val result = ref.getLongitude()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setLongitude" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLongitude([\"var1\":$var1])")
        
            // invoke native method
            ref.setLongitude(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getSatellites" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getSatellites([])")
        
            // invoke native method
            val result = ref.getSatellites()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setSatellites" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setSatellites([\"var1\":$var1])")
        
            // invoke native method
            ref.setSatellites(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getStreet" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getStreet([])")
        
            // invoke native method
            val result = ref.getStreet()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setStreet" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setStreet([\"var1\":$var1])")
        
            // invoke native method
            ref.setStreet(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getStreetNum" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getStreetNum([])")
        
            // invoke native method
            val result = ref.getStreetNum()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setNumber" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setNumber([\"var1\":$var1])")
        
            // invoke native method
            ref.setNumber(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::setOffset" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setOffset([\"var1\":$var1])")
        
            // invoke native method
            ref.setOffset(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::isOffset" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::isOffset([])")
        
            // invoke native method
            val result = ref.isOffset()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getAoiName" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAoiName([])")
        
            // invoke native method
            val result = ref.getAoiName()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setAoiName" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setAoiName([\"var1\":$var1])")
        
            // invoke native method
            ref.setAoiName(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getBuildingId" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getBuildingId([])")
        
            // invoke native method
            val result = ref.getBuildingId()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setBuildingId" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setBuildingId([\"var1\":$var1])")
        
            // invoke native method
            ref.setBuildingId(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getFloor" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getFloor([])")
        
            // invoke native method
            val result = ref.getFloor()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::isFixLastLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::isFixLastLocation([])")
        
            // invoke native method
            val result = ref.isFixLastLocation()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setFixLastLocation" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setFixLastLocation([\"var1\":$var1])")
        
            // invoke native method
            ref.setFixLastLocation(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::setFloor" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setFloor([\"var1\":$var1])")
        
            // invoke native method
            ref.setFloor(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::isMock" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::isMock([])")
        
            // invoke native method
            val result = ref.isMock()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setMock" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setMock([\"var1\":$var1])")
        
            // invoke native method
            ref.setMock(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getDescription" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getDescription([])")
        
            // invoke native method
            val result = ref.getDescription()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setDescription" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setDescription([\"var1\":$var1])")
        
            // invoke native method
            ref.setDescription(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::toStr" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::toStr([])")
        
            // invoke native method
            val result = ref.toStr()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getAccuracy" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAccuracy([])")
        
            // invoke native method
            val result = ref.getAccuracy()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getBearing" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getBearing([])")
        
            // invoke native method
            val result = ref.getBearing()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getAltitude" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAltitude([])")
        
            // invoke native method
            val result = ref.getAltitude()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getSpeed" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getSpeed([])")
        
            // invoke native method
            val result = ref.getSpeed()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getProvider" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getProvider([])")
        
            // invoke native method
            val result = ref.getProvider()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::clone" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::clone([])")
        
            // invoke native method
            val result = ref.clone()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocation::getLocationQualityReport" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLocationQualityReport([])")
        
            // invoke native method
            val result = ref.getLocationQualityReport()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocation::setLocationQualityReport" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.AMapLocationQualityReport
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLocationQualityReport([])")
        
            // invoke native method
            ref.setLocationQualityReport(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getCoordType" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getCoordType([])")
        
            // invoke native method
            val result = ref.getCoordType()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setCoordType" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setCoordType([\"var1\":$var1])")
        
            // invoke native method
            ref.setCoordType(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::setTrustedLevel" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setTrustedLevel([\"var1\":$var1])")
        
            // invoke native method
            ref.setTrustedLevel(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getTrustedLevel" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getTrustedLevel([])")
        
            // invoke native method
            val result = ref.getTrustedLevel()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getConScenario" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getConScenario([])")
        
            // invoke native method
            val result = ref.getConScenario()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setConScenario" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocation
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setConScenario([\"var1\":$var1])")
        
            // invoke native method
            ref.setConScenario(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::getAPIKEY" to { registrar, args, methodResult ->
            // args
        
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::getAPIKEY([])")
        
            // invoke native method
            val result = com.amap.api.location.AMapLocationClientOption.getAPIKEY()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::isMockEnable" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isMockEnable([])")
        
            // invoke native method
            val result = ref.isMockEnable()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setMockEnable" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setMockEnable([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setMockEnable(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getInterval" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getInterval([])")
        
            // invoke native method
            val result = ref.getInterval()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setInterval" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Long
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setInterval([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setInterval(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isOnceLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isOnceLocation([])")
        
            // invoke native method
            val result = ref.isOnceLocation()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setOnceLocation" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setOnceLocation([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setOnceLocation(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isNeedAddress" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isNeedAddress([])")
        
            // invoke native method
            val result = ref.isNeedAddress()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setNeedAddress" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setNeedAddress([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setNeedAddress(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isWifiActiveScan" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isWifiActiveScan([])")
        
            // invoke native method
            val result = ref.isWifiActiveScan()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setWifiActiveScan" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setWifiActiveScan([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setWifiActiveScan(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isWifiScan" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isWifiScan([])")
        
            // invoke native method
            val result = ref.isWifiScan()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setWifiScan" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setWifiScan([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setWifiScan(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getLocationMode" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getLocationMode([])")
        
            // invoke native method
            val result = ref.getLocationMode()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setLocationMode" to { registrar, args, methodResult ->
            // args
            // enum arg
            val var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationMode.values()[args["var1"] as Int]
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setLocationMode([])")
        
            // invoke native method
            val result = ref.setLocationMode(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getLocationProtocol" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getLocationProtocol([])")
        
            // invoke native method
            val result = ref.getLocationProtocol()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setLocationProtocol" to { registrar, args, methodResult ->
            // args
            // enum arg
            val var0 = com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol.values()[args["var0"] as Int]
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setLocationProtocol([])")
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.setLocationProtocol(var0)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::isKillProcess" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isKillProcess([])")
        
            // invoke native method
            val result = ref.isKillProcess()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setKillProcess" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setKillProcess([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setKillProcess(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isGpsFirst" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isGpsFirst([])")
        
            // invoke native method
            val result = ref.isGpsFirst()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setGpsFirst" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setGpsFirst([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setGpsFirst(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setGpsFirstTimeout" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Long
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setGpsFirstTimeout([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setGpsFirstTimeout(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getGpsFirstTimeout" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getGpsFirstTimeout([])")
        
            // invoke native method
            val result = ref.getGpsFirstTimeout()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::clone" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::clone([])")
        
            // invoke native method
            val result = ref.clone()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getHttpTimeOut" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getHttpTimeOut([])")
        
            // invoke native method
            val result = ref.getHttpTimeOut()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setHttpTimeOut" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Long
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setHttpTimeOut([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setHttpTimeOut(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isOffset" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isOffset([])")
        
            // invoke native method
            val result = ref.isOffset()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setOffset" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setOffset([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setOffset(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isLocationCacheEnable" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isLocationCacheEnable([])")
        
            // invoke native method
            val result = ref.isLocationCacheEnable()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setLocationCacheEnable" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setLocationCacheEnable([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setLocationCacheEnable(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isOnceLocationLatest" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isOnceLocationLatest([])")
        
            // invoke native method
            val result = ref.isOnceLocationLatest()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setOnceLocationLatest" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setOnceLocationLatest([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setOnceLocationLatest(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isSensorEnable" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isSensorEnable([])")
        
            // invoke native method
            val result = ref.isSensorEnable()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setSensorEnable" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setSensorEnable([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setSensorEnable(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setLastLocationLifeCycle" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Long
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setLastLocationLifeCycle([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setLastLocationLifeCycle(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getLastLocationLifeCycle" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getLastLocationLifeCycle([])")
        
            // invoke native method
            val result = ref.getLastLocationLifeCycle()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::getGeoLanguage" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getGeoLanguage([])")
        
            // invoke native method
            val result = ref.getGeoLanguage()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setGeoLanguage" to { registrar, args, methodResult ->
            // args
            // enum arg
            val var1 = com.amap.api.location.AMapLocationClientOption.GeoLanguage.values()[args["var1"] as Int]
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setGeoLanguage([])")
        
            // invoke native method
            val result = ref.setGeoLanguage(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setDownloadCoordinateConvertLibrary" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var0 = args["var0"] as Boolean
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setDownloadCoordinateConvertLibrary([\"var0\":$var0])")
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.setDownloadCoordinateConvertLibrary(var0)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::isDownloadCoordinateConvertLibrary" to { registrar, args, methodResult ->
            // args
        
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::isDownloadCoordinateConvertLibrary([])")
        
            // invoke native method
            val result = com.amap.api.location.AMapLocationClientOption.isDownloadCoordinateConvertLibrary()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::getDeviceModeDistanceFilter" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getDeviceModeDistanceFilter([])")
        
            // invoke native method
            val result = ref.getDeviceModeDistanceFilter()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setDeviceModeDistanceFilter" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setDeviceModeDistanceFilter([\"var1\":$var1])")
        
            // invoke native method
            val result = ref.setDeviceModeDistanceFilter(var1.toFloat())
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setLocationPurpose" to { registrar, args, methodResult ->
            // args
            // enum arg
            val var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationPurpose.values()[args["var1"] as Int]
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setLocationPurpose([])")
        
            // invoke native method
            val result = ref.setLocationPurpose(var1)
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getLocationPurpose" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getLocationPurpose([])")
        
            // invoke native method
            val result = ref.getLocationPurpose()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isOpenAlwaysScanWifi" to { registrar, args, methodResult ->
            // args
        
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::isOpenAlwaysScanWifi([])")
        
            // invoke native method
            val result = com.amap.api.location.AMapLocationClientOption.isOpenAlwaysScanWifi()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setOpenAlwaysScanWifi" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var0 = args["var0"] as Boolean
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setOpenAlwaysScanWifi([\"var0\":$var0])")
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.setOpenAlwaysScanWifi(var0)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::setScanWifiInterval" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var0 = args["var0"] as Long
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setScanWifiInterval([\"var0\":$var0])")
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.setScanWifiInterval(var0)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::getScanWifiInterval" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationClientOption
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getScanWifiInterval([])")
        
            // invoke native method
            val result = ref.getScanWifiInterval()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.APSServiceBase::onCreate" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.APSServiceBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.APSServiceBase@$refId::onCreate([])")
        
            // invoke native method
            ref.onCreate()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.APSServiceBase::onDestroy" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.APSServiceBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.APSServiceBase@$refId::onDestroy([])")
        
            // invoke native method
            ref.onDestroy()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::setWifiAble" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setWifiAble([\"var1\":$var1])")
        
            // invoke native method
            ref.setWifiAble(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::setGpsStatus" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setGpsStatus([\"var1\":$var1])")
        
            // invoke native method
            ref.setGpsStatus(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::setGPSSatellites" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setGPSSatellites([\"var1\":$var1])")
        
            // invoke native method
            ref.setGPSSatellites(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::isWifiAble" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::isWifiAble([])")
        
            // invoke native method
            val result = ref.isWifiAble()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::getGPSStatus" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getGPSStatus([])")
        
            // invoke native method
            val result = ref.getGPSStatus()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::getGPSSatellites" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getGPSSatellites([])")
        
            // invoke native method
            val result = ref.getGPSSatellites()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::getNetworkType" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getNetworkType([])")
        
            // invoke native method
            val result = ref.getNetworkType()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::setNetworkType" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setNetworkType([\"var1\":$var1])")
        
            // invoke native method
            ref.setNetworkType(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::getNetUseTime" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getNetUseTime([])")
        
            // invoke native method
            val result = ref.getNetUseTime()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::setNetUseTime" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Long
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setNetUseTime([\"var1\":$var1])")
        
            // invoke native method
            ref.setNetUseTime(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::setInstallHighDangerMockApp" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setInstallHighDangerMockApp([\"var1\":$var1])")
        
            // invoke native method
            ref.setInstallHighDangerMockApp(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::isInstalledHighDangerMockApp" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::isInstalledHighDangerMockApp([])")
        
            // invoke native method
            val result = ref.isInstalledHighDangerMockApp()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::setLocationMode" to { registrar, args, methodResult ->
            // args
            // enum arg
            val var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationMode.values()[args["var1"] as Int]
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setLocationMode([])")
        
            // invoke native method
            ref.setLocationMode(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::getAdviseMessage" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // print log
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getAdviseMessage([])")
        
            // invoke native method
            val result = ref.getAdviseMessage()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.DistrictItem::getCitycode" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.DistrictItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::getCitycode([])")
        
            // invoke native method
            val result = ref.getCitycode()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.DistrictItem::setCitycode" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.DistrictItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::setCitycode([\"var1\":$var1])")
        
            // invoke native method
            ref.setCitycode(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.DistrictItem::getAdcode" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.DistrictItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::getAdcode([])")
        
            // invoke native method
            val result = ref.getAdcode()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.DistrictItem::setAdcode" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.DistrictItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::setAdcode([\"var1\":$var1])")
        
            // invoke native method
            ref.setAdcode(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.DistrictItem::getPolyline" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.DistrictItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::getPolyline([])")
        
            // invoke native method
            val result = ref.getPolyline()
        
            // result
            if (result != null) {
                for (item in result) {
                    HEAP_AmapLocationFluttify[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.DistrictItem::setPolyline" to { registrar, args, methodResult ->
            // args
            // list arg
            val var1 = (args["var1"] as List<Int>).map { HEAP_AmapLocationFluttify[it] as com.amap.api.location.DPoint }
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.DistrictItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::setPolyline([])")
        
            // invoke native method
            ref.setPolyline(ArrayList(var1))
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.DistrictItem::getDistrictName" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.DistrictItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::getDistrictName([])")
        
            // invoke native method
            val result = ref.getDistrictName()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.DistrictItem::setDistrictName" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.DistrictItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::setDistrictName([\"var1\":$var1])")
        
            // invoke native method
            ref.setDistrictName(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.DistrictItem::getCreator" to { registrar, args, methodResult ->
            // args
        
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem::getCreator([])")
        
            // invoke native method
            val result = com.amap.api.fence.DistrictItem.getCreator()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFenceClient::setActivateAction" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::setActivateAction([\"var1\":$var1])")
        
            // invoke native method
            ref.setActivateAction(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::setGeoFenceListener" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::setGeoFenceListener([])")
        
            // invoke native method
            ref.setGeoFenceListener(object : com.amap.api.fence.GeoFenceListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.fence.GeoFenceClient::setGeoFenceListener::Callback")
        
                // call dart method
                override fun onGeoFenceCreateFinished(var1: List<com.amap.api.fence.GeoFence>, var2: Int, var3: String): Unit {
                    // print log
                    println("fluttify-kotlin-callback: onGeoFenceCreateFinished([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
                    // convert to jsonable data
                    val argvar1 = var1.map { it.apply { HEAP_AmapLocationFluttify[it.hashCode()] = it }.hashCode() }
                    val argvar2 = var2
                    val argvar3 = var3
        
                    // call dart method
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2,
                            "var3" to argvar3
                        )
                    )
        
                    // method result
        
                }
        
            })
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::addGeoFence" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.DPoint
            // jsonable arg
            val var2 = args["var2"] as Double
            // jsonable arg
            val var3 = args["var3"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::addGeoFence([\"var2\":$var2, \"var3\":$var3])")
        
            // invoke native method
            ref.addGeoFence(var1, var2.toFloat(), var3)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::removeGeoFence" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::removeGeoFence([])")
        
            // invoke native method
            ref.removeGeoFence()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::getAllGeoFence" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::getAllGeoFence([])")
        
            // invoke native method
            val result = ref.getAllGeoFence()
        
            // result
            if (result != null) {
                for (item in result) {
                    HEAP_AmapLocationFluttify[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFenceClient::setGeoFenceAble" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
            // jsonable arg
            val var2 = args["var2"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::setGeoFenceAble([\"var1\":$var1, \"var2\":$var2])")
        
            // invoke native method
            ref.setGeoFenceAble(var1, var2)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::pauseGeoFence" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::pauseGeoFence([])")
        
            // invoke native method
            ref.pauseGeoFence()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::resumeGeoFence" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::resumeGeoFence([])")
        
            // invoke native method
            ref.resumeGeoFence()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::isPause" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceClient
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::isPause([])")
        
            // invoke native method
            val result = ref.isPause()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished" to { registrar, args, methodResult ->
            // args
            // list arg
            val var1 = (args["var1"] as List<Int>).map { HEAP_AmapLocationFluttify[it] as com.amap.api.fence.GeoFence }
            // jsonable arg
            val var2 = args["var2"] as Int
            // jsonable arg
            val var3 = args["var3"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceListener
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceListener@$refId::onGeoFenceCreateFinished([\"var2\":$var2, \"var3\":$var3])")
        
            // invoke native method
            ref.onGeoFenceCreateFinished(ArrayList(var1), var2, var3)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getFenceId" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getFenceId([])")
        
            // invoke native method
            val result = ref.getFenceId()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setFenceId" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setFenceId([\"var1\":$var1])")
        
            // invoke native method
            ref.setFenceId(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getCustomId" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getCustomId([])")
        
            // invoke native method
            val result = ref.getCustomId()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setCustomId" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setCustomId([\"var1\":$var1])")
        
            // invoke native method
            ref.setCustomId(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getPendingIntentAction" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getPendingIntentAction([])")
        
            // invoke native method
            val result = ref.getPendingIntentAction()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setPendingIntentAction" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setPendingIntentAction([\"var1\":$var1])")
        
            // invoke native method
            ref.setPendingIntentAction(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getType" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getType([])")
        
            // invoke native method
            val result = ref.getType()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setType" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setType([\"var1\":$var1])")
        
            // invoke native method
            ref.setType(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getPoiItem" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getPoiItem([])")
        
            // invoke native method
            val result = ref.getPoiItem()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFence::setPoiItem" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.fence.PoiItem
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setPoiItem([])")
        
            // invoke native method
            ref.setPoiItem(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getDistrictItemList" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getDistrictItemList([])")
        
            // invoke native method
            val result = ref.getDistrictItemList()
        
            // result
            if (result != null) {
                for (item in result) {
                    HEAP_AmapLocationFluttify[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFence::setDistrictItemList" to { registrar, args, methodResult ->
            // args
            // list arg
            val var1 = (args["var1"] as List<Int>).map { HEAP_AmapLocationFluttify[it] as com.amap.api.fence.DistrictItem }
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setDistrictItemList([])")
        
            // invoke native method
            ref.setDistrictItemList(ArrayList(var1))
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getPointList" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getPointList([])")
        
            // invoke native method
            val result = ref.getPointList()
        
            // result
            if (result != null) {
                for (item in result) {
                    HEAP_AmapLocationFluttify[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFence::setPointList" to { registrar, args, methodResult ->
            // args
            val var1 = listOf<List<com.amap.api.location.DPoint>>()
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setPointList([])")
        
            // invoke native method
            ref.setPointList(ArrayList(var1))
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getRadius" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getRadius([])")
        
            // invoke native method
            val result = ref.getRadius()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setRadius" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setRadius([\"var1\":$var1])")
        
            // invoke native method
            ref.setRadius(var1.toFloat())
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getExpiration" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getExpiration([])")
        
            // invoke native method
            val result = ref.getExpiration()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setExpiration" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Long
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setExpiration([\"var1\":$var1])")
        
            // invoke native method
            ref.setExpiration(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getActivatesAction" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getActivatesAction([])")
        
            // invoke native method
            val result = ref.getActivatesAction()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setActivatesAction" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setActivatesAction([\"var1\":$var1])")
        
            // invoke native method
            ref.setActivatesAction(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getStatus" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getStatus([])")
        
            // invoke native method
            val result = ref.getStatus()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setStatus" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setStatus([\"var1\":$var1])")
        
            // invoke native method
            ref.setStatus(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getEnterTime" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getEnterTime([])")
        
            // invoke native method
            val result = ref.getEnterTime()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setEnterTime" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Long
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setEnterTime([\"var1\":$var1])")
        
            // invoke native method
            ref.setEnterTime(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getCenter" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getCenter([])")
        
            // invoke native method
            val result = ref.getCenter()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFence::setCenter" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.DPoint
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setCenter([])")
        
            // invoke native method
            ref.setCenter(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getMinDis2Center" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getMinDis2Center([])")
        
            // invoke native method
            val result = ref.getMinDis2Center()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setMinDis2Center" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setMinDis2Center([\"var1\":$var1])")
        
            // invoke native method
            ref.setMinDis2Center(var1.toFloat())
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getMaxDis2Center" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getMaxDis2Center([])")
        
            // invoke native method
            val result = ref.getMaxDis2Center()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setMaxDis2Center" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setMaxDis2Center([\"var1\":$var1])")
        
            // invoke native method
            ref.setMaxDis2Center(var1.toFloat())
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::isAble" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::isAble([])")
        
            // invoke native method
            val result = ref.isAble()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setAble" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setAble([\"var1\":$var1])")
        
            // invoke native method
            ref.setAble(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::setCurrentLocation" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.AMapLocation
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setCurrentLocation([])")
        
            // invoke native method
            ref.setCurrentLocation(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getCurrentLocation" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFence
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getCurrentLocation([])")
        
            // invoke native method
            val result = ref.getCurrentLocation()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFenceManagerBase::setActivateAction" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Int
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::setActivateAction([\"var1\":$var1])")
        
            // invoke native method
            ref.setActivateAction(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::setGeoFenceListener" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::setGeoFenceListener([])")
        
            // invoke native method
            ref.setGeoFenceListener(object : com.amap.api.fence.GeoFenceListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.fence.GeoFenceManagerBase::setGeoFenceListener::Callback")
        
                // call dart method
                override fun onGeoFenceCreateFinished(var1: List<com.amap.api.fence.GeoFence>, var2: Int, var3: String): Unit {
                    // print log
                    println("fluttify-kotlin-callback: onGeoFenceCreateFinished([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
                    // convert to jsonable data
                    val argvar1 = var1.map { it.apply { HEAP_AmapLocationFluttify[it.hashCode()] = it }.hashCode() }
                    val argvar2 = var2
                    val argvar3 = var3
        
                    // call dart method
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2,
                            "var3" to argvar3
                        )
                    )
        
                    // method result
        
                }
        
            })
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addRoundGeoFence" to { registrar, args, methodResult ->
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as com.amap.api.location.DPoint
            // jsonable arg
            val var2 = args["var2"] as Double
            // jsonable arg
            val var3 = args["var3"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addRoundGeoFence([\"var2\":$var2, \"var3\":$var3])")
        
            // invoke native method
            ref.addRoundGeoFence(var1, var2.toFloat(), var3)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addPolygonGeoFence" to { registrar, args, methodResult ->
            // args
            // list arg
            val var1 = (args["var1"] as List<Int>).map { HEAP_AmapLocationFluttify[it] as com.amap.api.location.DPoint }
            // jsonable arg
            val var2 = args["var2"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addPolygonGeoFence([\"var2\":$var2])")
        
            // invoke native method
            ref.addPolygonGeoFence(ArrayList(var1), var2)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addNearbyGeoFence" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
            // jsonable arg
            val var2 = args["var2"] as String
            // ref arg
            val var3 = HEAP_AmapLocationFluttify[args["var3"] as Int] as com.amap.api.location.DPoint
            // jsonable arg
            val var4 = args["var4"] as Double
            // jsonable arg
            val var5 = args["var5"] as Int
            // jsonable arg
            val var6 = args["var6"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addNearbyGeoFence([\"var1\":$var1, \"var2\":$var2, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6])")
        
            // invoke native method
            ref.addNearbyGeoFence(var1, var2, var3, var4.toFloat(), var5, var6)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addKeywordGeoFence" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
            // jsonable arg
            val var2 = args["var2"] as String
            // jsonable arg
            val var3 = args["var3"] as String
            // jsonable arg
            val var4 = args["var4"] as Int
            // jsonable arg
            val var5 = args["var5"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addKeywordGeoFence([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5])")
        
            // invoke native method
            ref.addKeywordGeoFence(var1, var2, var3, var4, var5)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addDistrictGeoFence" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
            // jsonable arg
            val var2 = args["var2"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addDistrictGeoFence([\"var1\":$var1, \"var2\":$var2])")
        
            // invoke native method
            ref.addDistrictGeoFence(var1, var2)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::removeGeoFence" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::removeGeoFence([])")
        
            // invoke native method
            ref.removeGeoFence()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::getAllGeoFence" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::getAllGeoFence([])")
        
            // invoke native method
            val result = ref.getAllGeoFence()
        
            // result
            if (result != null) {
                for (item in result) {
                    HEAP_AmapLocationFluttify[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFenceManagerBase::setGeoFenceAble" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
            // jsonable arg
            val var2 = args["var2"] as Boolean
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::setGeoFenceAble([\"var1\":$var1, \"var2\":$var2])")
        
            // invoke native method
            ref.setGeoFenceAble(var1, var2)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::pauseGeoFence" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::pauseGeoFence([])")
        
            // invoke native method
            ref.pauseGeoFence()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::resumeGeoFence" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::resumeGeoFence([])")
        
            // invoke native method
            ref.resumeGeoFence()
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::isPause" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::isPause([])")
        
            // invoke native method
            val result = ref.isPause()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::getLatitude" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getLatitude([])")
        
            // invoke native method
            val result = ref.getLatitude()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setLatitude" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setLatitude([\"var1\":$var1])")
        
            // invoke native method
            ref.setLatitude(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getLongitude" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getLongitude([])")
        
            // invoke native method
            val result = ref.getLongitude()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setLongitude" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setLongitude([\"var1\":$var1])")
        
            // invoke native method
            ref.setLongitude(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getPoiId" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getPoiId([])")
        
            // invoke native method
            val result = ref.getPoiId()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setPoiId" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setPoiId([\"var1\":$var1])")
        
            // invoke native method
            ref.setPoiId(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getPoiType" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getPoiType([])")
        
            // invoke native method
            val result = ref.getPoiType()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setPoiType" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setPoiType([\"var1\":$var1])")
        
            // invoke native method
            ref.setPoiType(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getTypeCode" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getTypeCode([])")
        
            // invoke native method
            val result = ref.getTypeCode()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setTypeCode" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setTypeCode([\"var1\":$var1])")
        
            // invoke native method
            ref.setTypeCode(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getAddress" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getAddress([])")
        
            // invoke native method
            val result = ref.getAddress()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setAddress" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setAddress([\"var1\":$var1])")
        
            // invoke native method
            ref.setAddress(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getTel" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getTel([])")
        
            // invoke native method
            val result = ref.getTel()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setTel" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setTel([\"var1\":$var1])")
        
            // invoke native method
            ref.setTel(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getProvince" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getProvince([])")
        
            // invoke native method
            val result = ref.getProvince()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setProvince" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setProvince([\"var1\":$var1])")
        
            // invoke native method
            ref.setProvince(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getCity" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getCity([])")
        
            // invoke native method
            val result = ref.getCity()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setCity" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setCity([\"var1\":$var1])")
        
            // invoke native method
            ref.setCity(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getAdname" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getAdname([])")
        
            // invoke native method
            val result = ref.getAdname()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::getPoiName" to { registrar, args, methodResult ->
            // args
        
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getPoiName([])")
        
            // invoke native method
            val result = ref.getPoiName()
        
            // result
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setPoiName" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setPoiName([\"var1\":$var1])")
        
            // invoke native method
            ref.setPoiName(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::setAdname" to { registrar, args, methodResult ->
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // ref
            val refId = args["refId"] as Int
            val ref = HEAP_AmapLocationFluttify[refId] as com.amap.api.fence.PoiItem
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setAdname([\"var1\":$var1])")
        
            // invoke native method
            ref.setAdname(var1)
        
            // result
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getCreator" to { registrar, args, methodResult ->
            // args
        
        
            // ref
        
        
            // print log
            println("fluttify-kotlin: com.amap.api.fence.PoiItem::getCreator([])")
        
            // invoke native method
            val result = com.amap.api.fence.PoiItem.getCreator()
        
            // result
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP_AmapLocationFluttify[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "ObjectFactory::createcom_autonavi_aps_amapapi_model_AMapLocationServer__String" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_autonavi_aps_amapapi_model_AMapLocationServer__String")
        
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // create target object
            val obj = com.autonavi.aps.amapapi.model.AMapLocationServer(var1)
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_AMapLocationClient__android_content_Context" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocationClient__android_content_Context")
        
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as android.content.Context
        
            // create target object
            val obj = com.amap.api.location.AMapLocationClient(var1)
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_DPoint__" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_DPoint__")
        
            // args
        
        
            // create target object
            val obj = com.amap.api.location.DPoint()
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_DPoint__double__double" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_DPoint__double__double")
        
            // args
            // jsonable arg
            val var1 = args["var1"] as Double
            // jsonable arg
            val var3 = args["var3"] as Double
        
            // create target object
            val obj = com.amap.api.location.DPoint(var1, var3)
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_CoordinateConverter__android_content_Context" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_CoordinateConverter__android_content_Context")
        
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as android.content.Context
        
            // create target object
            val obj = com.amap.api.location.CoordinateConverter(var1)
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_CoordUtil__" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_CoordUtil__")
        
            // args
        
        
            // create target object
            val obj = com.amap.api.location.CoordUtil()
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_UmidtokenInfo__" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_UmidtokenInfo__")
        
            // args
        
        
            // create target object
            val obj = com.amap.api.location.UmidtokenInfo()
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_AMapLocation__String" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocation__String")
        
            // args
            // jsonable arg
            val var1 = args["var1"] as String
        
            // create target object
            val obj = com.amap.api.location.AMapLocation(var1)
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_AMapLocation__android_location_Location" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocation__android_location_Location")
        
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as android.location.Location
        
            // create target object
            val obj = com.amap.api.location.AMapLocation(var1)
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_AMapLocationClientOption__" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocationClientOption__")
        
            // args
        
        
            // create target object
            val obj = com.amap.api.location.AMapLocationClientOption()
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_location_AMapLocationQualityReport__" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocationQualityReport__")
        
            // args
        
        
            // create target object
            val obj = com.amap.api.location.AMapLocationQualityReport()
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_fence_DistrictItem__" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_fence_DistrictItem__")
        
            // args
        
        
            // create target object
            val obj = com.amap.api.fence.DistrictItem()
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_fence_GeoFenceClient__android_content_Context" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_fence_GeoFenceClient__android_content_Context")
        
            // args
            // ref arg
            val var1 = HEAP_AmapLocationFluttify[args["var1"] as Int] as android.content.Context
        
            // create target object
            val obj = com.amap.api.fence.GeoFenceClient(var1)
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_fence_GeoFence__" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_fence_GeoFence__")
        
            // args
        
        
            // create target object
            val obj = com.amap.api.fence.GeoFence()
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        },
        "ObjectFactory::createcom_amap_api_fence_PoiItem__" to { registrar, args, methodResult ->
            Log.d("ObjectFactory", "创建对象: com_amap_api_fence_PoiItem__")
        
            // args
        
        
            // create target object
            val obj = com.amap.api.fence.PoiItem()
            HEAP_AmapLocationFluttify[obj.hashCode()] = obj
        
            // print current HEAP_AmapLocationFluttify
            Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
        
            methodResult.success(obj.hashCode())
        }
    )

    override fun onMethodCall(methodCall: MethodCall, methodResult: MethodChannel.Result) {
        val args = methodCall.arguments as? Map<String, Any> ?: mapOf()
        when (methodCall.method) {
            // get Application obejct
            "ObjectFactory::getandroid_app_Application" -> {
                methodResult.success(registrar.activity().application.apply { HEAP_AmapLocationFluttify[hashCode()] = this }.hashCode())
            }
            // get FlutterActivity object
            "ObjectFactory::getandroid_app_Activity" -> {
                methodResult.success(registrar.activity().apply { HEAP_AmapLocationFluttify[hashCode()] = this }.hashCode())
            }
            // create android.os.Bundle
            "ObjectFactory::createandroid_os_Bundle" -> {
                methodResult.success(Bundle().apply { HEAP_AmapLocationFluttify[hashCode()] = this }.hashCode())
            }
            // create bitmap object
            "ObjectFactory::createandroid_graphics_Bitmap" -> {
                val bitmapBytes = args["bitmapBytes"] as ByteArray
                val bitmap = android.graphics.BitmapFactory.decodeByteArray(bitmapBytes, 0, bitmapBytes.size)

                HEAP_AmapLocationFluttify[bitmap.hashCode()] = bitmap

                methodResult.success(bitmap.hashCode())
            }
            // release an object
            "ObjectFactory::release" -> {
                Log.d("ObjectFactory", "释放对象: ${HEAP_AmapLocationFluttify[args["refId"] as Int]?.javaClass}@${args["refId"]}")

                HEAP_AmapLocationFluttify.remove(args["refId"] as Int)

                methodResult.success("success")

                // print current HEAP_AmapLocationFluttify
                Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
            }
            // clear objects in HEAP_AmapLocationFluttify
            "ObjectFactory::clearHeap" -> {
                Log.d("ObjectFactory", "CLEAR HEAP")

                HEAP_AmapLocationFluttify.clear()
                methodResult.success("success")

                // print current HEAP_AmapLocationFluttify
                Log.d("ObjectFactory", "HEAP_AmapLocationFluttify: $HEAP_AmapLocationFluttify")
            }
            // push an object to stack
            "ObjectFactory::pushStack" -> {
                val name = args["name"] as String
                val refId = args["refId"] as Int

                Log.d("ObjectFactory", "PUSH OBJECT: ${HEAP_AmapLocationFluttify[refId]?.javaClass}@${refId}")

                HEAP_AmapLocationFluttify[refId]?.run { STACK_AmapLocationFluttify[name] = this }

                methodResult.success("success")

                // print current STACK_AmapLocationFluttify
                Log.d("ObjectFactory", "STACK_AmapLocationFluttify: $STACK_AmapLocationFluttify")
            }
            // push a jsonable to stack
            "ObjectFactory::pushStackJsonable" -> {
                val name = args["name"] as String
                val data = args["data"]

                Log.d("ObjectFactory", "压入jsonable: ${data?.javaClass}@${data}")

                STACK_AmapLocationFluttify[name] = data!!

                methodResult.success("success")

                // 打印当前STACK_AmapLocationFluttify
                Log.d("ObjectFactory", "STACK_AmapLocationFluttify: $STACK_AmapLocationFluttify")
            }
            // clear STACK
            "ObjectFactory::clearStack" -> {
                STACK_AmapLocationFluttify.clear()

                methodResult.success("success")

                // print current STACK_AmapLocationFluttify
                Log.d("ObjectFactory", "STACK_AmapLocationFluttify: $STACK_AmapLocationFluttify")
            }
            else -> {
                handlerMap[methodCall.method]?.invoke(registrar, args, methodResult) ?: methodResult.notImplemented()
            }
        }
    }
}
