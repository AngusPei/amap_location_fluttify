//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_location_fluttify;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;
import me.yohom.foundation_fluttify.BuildConfig;
import androidx.annotation.NonNull;

@SuppressWarnings("ALL")
public class AmapLocationFluttifyPlugin implements MethodChannel.MethodCallHandler {

    private AmapLocationFluttifyPlugin(Registrar registrar) {
        this.registrar = registrar;
    }

    private Registrar registrar;

    private final Map<String, Handler> handlerMap = new HashMap<String, Handler>() {{
        put("com.autonavi.aps.amapapi.model.AMapLocationServer::toStr", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.autonavi.aps.amapapi.model.AMapLocationServer ref = (com.autonavi.aps.amapapi.model.AMapLocationServer) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.autonavi.aps.amapapi.model.AMapLocationServer@" + refId + "::toStr()");
            }
        
            // invoke native method
            String result = ref.toStr();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.LocationManagerBase::setLocationOption", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.AMapLocationClientOption var1 = (com.amap.api.location.AMapLocationClientOption) getHEAP().get((int) args.get("var1"));
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::setLocationOption()");
            }
        
            // invoke native method
            ref.setLocationOption(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.LocationManagerBase::setLocationListener", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::setLocationListener()");
            }
        
            // invoke native method
            ref.setLocationListener(new com.amap.api.location.AMapLocationListener() {
                // method channel
                MethodChannel callbackChannel = new MethodChannel(registrar.messenger(), "com.amap.api.location.LocationManagerBase::setLocationListener::Callback");
        
                // call dart method
                @Override
                public void onLocationChanged(com.amap.api.location.AMapLocation var1) {
                    // print log
                    Log.d("kotlin-callback", "fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])");
        
                    // convert to jsonable data
                    int argvar1 = var1.hashCode();
                    getHEAP().put(argvar1, var1);
        
                    // call dart method
                    callbackChannel.invokeMethod(
                            "Callback::com.amap.api.location.AMapLocationListener::onLocationChanged",
                            new HashMap<String, Object>() {{
                                put("var1", argvar1);
                            }}
                    );
        
                    // method result
        
                }
        
            });
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.LocationManagerBase::startLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::startLocation()");
            }
        
            // invoke native method
            ref.startLocation();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.LocationManagerBase::stopLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::stopLocation()");
            }
        
            // invoke native method
            ref.stopLocation();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.LocationManagerBase::getLastKnownLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::getLastKnownLocation()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocation result = ref.getLastKnownLocation();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.LocationManagerBase::startAssistantLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::startAssistantLocation()");
            }
        
            // invoke native method
            ref.startAssistantLocation();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.LocationManagerBase::stopAssistantLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::stopAssistantLocation()");
            }
        
            // invoke native method
            ref.stopAssistantLocation();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.LocationManagerBase::isStarted", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::isStarted()");
            }
        
            // invoke native method
            boolean result = ref.isStarted();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.LocationManagerBase::unRegisterLocationListener", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::unRegisterLocationListener()");
            }
        
            // invoke native method
            ref.unRegisterLocationListener(new com.amap.api.location.AMapLocationListener() {
                // method channel
                MethodChannel callbackChannel = new MethodChannel(registrar.messenger(), "com.amap.api.location.LocationManagerBase::unRegisterLocationListener::Callback");
        
                // call dart method
                @Override
                public void onLocationChanged(com.amap.api.location.AMapLocation var1) {
                    // print log
                    Log.d("kotlin-callback", "fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])");
        
                    // convert to jsonable data
                    int argvar1 = var1.hashCode();
                    getHEAP().put(argvar1, var1);
        
                    // call dart method
                    callbackChannel.invokeMethod(
                            "Callback::com.amap.api.location.AMapLocationListener::onLocationChanged",
                            new HashMap<String, Object>() {{
                                put("var1", argvar1);
                            }}
                    );
        
                    // method result
        
                }
        
            });
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.LocationManagerBase::onDestroy", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::onDestroy()");
            }
        
            // invoke native method
            ref.onDestroy();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.LocationManagerBase::disableBackgroundLocation", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.LocationManagerBase@" + refId + "::disableBackgroundLocation(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.disableBackgroundLocation(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::setLocationOption", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.AMapLocationClientOption var1 = (com.amap.api.location.AMapLocationClientOption) getHEAP().get((int) args.get("var1"));
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::setLocationOption()");
            }
        
            // invoke native method
            ref.setLocationOption(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::setLocationListener", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::setLocationListener()");
            }
        
            // invoke native method
            ref.setLocationListener(new com.amap.api.location.AMapLocationListener() {
                // method channel
                MethodChannel callbackChannel = new MethodChannel(registrar.messenger(), "com.amap.api.location.AMapLocationClient::setLocationListener::Callback");
        
                // call dart method
                @Override
                public void onLocationChanged(com.amap.api.location.AMapLocation var1) {
                    // print log
                    Log.d("kotlin-callback", "fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])");
        
                    // convert to jsonable data
                    int argvar1 = var1.hashCode();
                    getHEAP().put(argvar1, var1);
        
                    // call dart method
                    callbackChannel.invokeMethod(
                            "Callback::com.amap.api.location.AMapLocationListener::onLocationChanged",
                            new HashMap<String, Object>() {{
                                put("var1", argvar1);
                            }}
                    );
        
                    // method result
        
                }
        
            });
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::startLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::startLocation()");
            }
        
            // invoke native method
            ref.startLocation();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::stopLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::stopLocation()");
            }
        
            // invoke native method
            ref.stopLocation();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::getLastKnownLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::getLastKnownLocation()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocation result = ref.getLastKnownLocation();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClient::startAssistantLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::startAssistantLocation()");
            }
        
            // invoke native method
            ref.startAssistantLocation();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::stopAssistantLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::stopAssistantLocation()");
            }
        
            // invoke native method
            ref.stopAssistantLocation();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::getVersion", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::getVersion()");
            }
        
            // invoke native method
            String result = ref.getVersion();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClient::setApiKey", (args, methodResult) -> {
            // args
            // jsonable arg
            String var0 = (String) args.get("var0");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient::setApiKey(\"var0\":$var0)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClient.setApiKey(var0);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::isStarted", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::isStarted()");
            }
        
            // invoke native method
            boolean result = ref.isStarted();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClient::unRegisterLocationListener", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::unRegisterLocationListener()");
            }
        
            // invoke native method
            ref.unRegisterLocationListener(new com.amap.api.location.AMapLocationListener() {
                // method channel
                MethodChannel callbackChannel = new MethodChannel(registrar.messenger(), "com.amap.api.location.AMapLocationClient::unRegisterLocationListener::Callback");
        
                // call dart method
                @Override
                public void onLocationChanged(com.amap.api.location.AMapLocation var1) {
                    // print log
                    Log.d("kotlin-callback", "fluttify-kotlin-callback: onLocationChanged([\"var1\":$var1])");
        
                    // convert to jsonable data
                    int argvar1 = var1.hashCode();
                    getHEAP().put(argvar1, var1);
        
                    // call dart method
                    callbackChannel.invokeMethod(
                            "Callback::com.amap.api.location.AMapLocationListener::onLocationChanged",
                            new HashMap<String, Object>() {{
                                put("var1", argvar1);
                            }}
                    );
        
                    // method result
        
                }
        
            });
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::onDestroy", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::onDestroy()");
            }
        
            // invoke native method
            ref.onDestroy();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::disableBackgroundLocation", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient@" + refId + "::disableBackgroundLocation(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.disableBackgroundLocation(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClient::getDeviceId", (args, methodResult) -> {
            // args
            // ref arg
            android.content.Context var0 = (android.content.Context) getHEAP().get((int) args.get("var0"));
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClient::getDeviceId()");
            }
        
            // invoke native method
            String result = com.amap.api.location.AMapLocationClient.getDeviceId(var0);
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationListener::onLocationChanged", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.AMapLocation var1 = (com.amap.api.location.AMapLocation) getHEAP().get((int) args.get("var1"));
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationListener ref = (com.amap.api.location.AMapLocationListener) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationListener@" + refId + "::onLocationChanged()");
            }
        
            // invoke native method
            ref.onLocationChanged(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.DPoint::getLongitude", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.DPoint ref = (com.amap.api.location.DPoint) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.DPoint@" + refId + "::getLongitude()");
            }
        
            // invoke native method
            double result = ref.getLongitude();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.DPoint::setLongitude", (args, methodResult) -> {
            // args
            // jsonable arg
            double var1 = (double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.DPoint ref = (com.amap.api.location.DPoint) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.DPoint@" + refId + "::setLongitude(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setLongitude(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.DPoint::getLatitude", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.DPoint ref = (com.amap.api.location.DPoint) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.DPoint@" + refId + "::getLatitude()");
            }
        
            // invoke native method
            double result = ref.getLatitude();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.DPoint::setLatitude", (args, methodResult) -> {
            // args
            // jsonable arg
            double var1 = (double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.DPoint ref = (com.amap.api.location.DPoint) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.DPoint@" + refId + "::setLatitude(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setLatitude(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.CoordinateConverter::from", (args, methodResult) -> {
            // args
            // enum arg
            com.amap.api.location.CoordinateConverter.CoordType var1 = com.amap.api.location.CoordinateConverter.CoordType.values()[(int) args.get("var1")];
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.CoordinateConverter ref = (com.amap.api.location.CoordinateConverter) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.CoordinateConverter@" + refId + "::from()");
            }
        
            // invoke native method
            com.amap.api.location.CoordinateConverter result = ref.from(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.CoordinateConverter::coord", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) args.get("var1"));
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.CoordinateConverter ref = (com.amap.api.location.CoordinateConverter) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.CoordinateConverter@" + refId + "::coord()");
            }
        
            // invoke native method
            com.amap.api.location.CoordinateConverter result = ref.coord(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.CoordinateConverter::convert", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.CoordinateConverter ref = (com.amap.api.location.CoordinateConverter) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.CoordinateConverter@" + refId + "::convert()");
            }
        
            // invoke native method
            com.amap.api.location.DPoint result = ref.convert();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.CoordinateConverter::isAMapDataAvailable", (args, methodResult) -> {
            // args
            // jsonable arg
            double var0 = (double) args.get("var0");
            // jsonable arg
            double var2 = (double) args.get("var2");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.CoordinateConverter::isAMapDataAvailable(\"var0\":$var0, \"var2\":$var2)");
            }
        
            // invoke native method
            boolean result = com.amap.api.location.CoordinateConverter.isAMapDataAvailable(var0, var2);
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.CoordinateConverter::calculateLineDistance", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.DPoint var0 = (com.amap.api.location.DPoint) getHEAP().get((int) args.get("var0"));
            // ref arg
            com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) args.get("var1"));
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.CoordinateConverter::calculateLineDistance()");
            }
        
            // invoke native method
            float result = com.amap.api.location.CoordinateConverter.calculateLineDistance(var0, var1);
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.CoordUtil::convertToGcj", (args, methodResult) -> {
            // args
            // jsonable arg
            double[] var0 = (double[]) args.get("var0");
            // jsonable arg
            double[] var1 = (double[]) args.get("var1");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.CoordUtil::convertToGcj(\"var0\":$var0, \"var1\":$var1)");
            }
        
            // invoke native method
            int result = com.amap.api.location.CoordUtil.convertToGcj(var0, var1);
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.CoordUtil::isLoadedSo", (args, methodResult) -> {
            // args
        
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.CoordUtil::isLoadedSo()");
            }
        
            // invoke native method
            boolean result = com.amap.api.location.CoordUtil.isLoadedSo();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.CoordUtil::setLoadedSo", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var0 = (boolean) args.get("var0");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.CoordUtil::setLoadedSo(\"var0\":$var0)");
            }
        
            // invoke native method
            com.amap.api.location.CoordUtil.setLoadedSo(var0);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol::getValue", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol ref = (com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol@" + refId + "::getValue()");
            }
        
            // invoke native method
            int result = ref.getValue();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.UmidtokenInfo::getUmidtoken", (args, methodResult) -> {
            // args
        
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.UmidtokenInfo::getUmidtoken()");
            }
        
            // invoke native method
            String result = com.amap.api.location.UmidtokenInfo.getUmidtoken();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.UmidtokenInfo::setLocAble", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var0 = (boolean) args.get("var0");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.UmidtokenInfo::setLocAble(\"var0\":$var0)");
            }
        
            // invoke native method
            com.amap.api.location.UmidtokenInfo.setLocAble(var0);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.UmidtokenInfo::setUmidtoken", (args, methodResult) -> {
            // args
            // ref arg
            android.content.Context var0 = (android.content.Context) getHEAP().get((int) args.get("var0"));
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.UmidtokenInfo::setUmidtoken(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.UmidtokenInfo.setUmidtoken(var0, var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getGpsAccuracyStatus", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getGpsAccuracyStatus()");
            }
        
            // invoke native method
            int result = ref.getGpsAccuracyStatus();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setGpsAccuracyStatus", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setGpsAccuracyStatus(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setGpsAccuracyStatus(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getLocationType", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getLocationType()");
            }
        
            // invoke native method
            int result = ref.getLocationType();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setLocationType", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setLocationType(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setLocationType(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getLocationDetail", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getLocationDetail()");
            }
        
            // invoke native method
            String result = ref.getLocationDetail();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setLocationDetail", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setLocationDetail(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setLocationDetail(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getErrorCode", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getErrorCode()");
            }
        
            // invoke native method
            int result = ref.getErrorCode();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setErrorCode", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setErrorCode(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setErrorCode(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getErrorInfo", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getErrorInfo()");
            }
        
            // invoke native method
            String result = ref.getErrorInfo();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setErrorInfo", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setErrorInfo(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setErrorInfo(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getCountry", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getCountry()");
            }
        
            // invoke native method
            String result = ref.getCountry();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setCountry", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setCountry(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setCountry(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getRoad", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getRoad()");
            }
        
            // invoke native method
            String result = ref.getRoad();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setRoad", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setRoad(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setRoad(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getAddress", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getAddress()");
            }
        
            // invoke native method
            String result = ref.getAddress();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setAddress", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setAddress(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setAddress(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getProvince", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getProvince()");
            }
        
            // invoke native method
            String result = ref.getProvince();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setProvince", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setProvince(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setProvince(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getCity", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getCity()");
            }
        
            // invoke native method
            String result = ref.getCity();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setCity", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setCity(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setCity(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getDistrict", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getDistrict()");
            }
        
            // invoke native method
            String result = ref.getDistrict();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setDistrict", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setDistrict(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setDistrict(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getCityCode", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getCityCode()");
            }
        
            // invoke native method
            String result = ref.getCityCode();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setCityCode", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setCityCode(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setCityCode(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getAdCode", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getAdCode()");
            }
        
            // invoke native method
            String result = ref.getAdCode();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setAdCode", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setAdCode(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setAdCode(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getPoiName", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getPoiName()");
            }
        
            // invoke native method
            String result = ref.getPoiName();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setPoiName", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setPoiName(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setPoiName(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getLatitude", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getLatitude()");
            }
        
            // invoke native method
            double result = ref.getLatitude();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setLatitude", (args, methodResult) -> {
            // args
            // jsonable arg
            double var1 = (double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setLatitude(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setLatitude(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getLongitude", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getLongitude()");
            }
        
            // invoke native method
            double result = ref.getLongitude();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setLongitude", (args, methodResult) -> {
            // args
            // jsonable arg
            double var1 = (double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setLongitude(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setLongitude(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getSatellites", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getSatellites()");
            }
        
            // invoke native method
            int result = ref.getSatellites();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setSatellites", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setSatellites(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setSatellites(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getStreet", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getStreet()");
            }
        
            // invoke native method
            String result = ref.getStreet();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setStreet", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setStreet(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setStreet(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getStreetNum", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getStreetNum()");
            }
        
            // invoke native method
            String result = ref.getStreetNum();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setNumber", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setNumber(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setNumber(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::setOffset", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setOffset(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setOffset(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::isOffset", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::isOffset()");
            }
        
            // invoke native method
            boolean result = ref.isOffset();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::getAoiName", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getAoiName()");
            }
        
            // invoke native method
            String result = ref.getAoiName();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setAoiName", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setAoiName(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setAoiName(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getBuildingId", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getBuildingId()");
            }
        
            // invoke native method
            String result = ref.getBuildingId();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setBuildingId", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setBuildingId(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setBuildingId(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getFloor", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getFloor()");
            }
        
            // invoke native method
            String result = ref.getFloor();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::isFixLastLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::isFixLastLocation()");
            }
        
            // invoke native method
            boolean result = ref.isFixLastLocation();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setFixLastLocation", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setFixLastLocation(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setFixLastLocation(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::setFloor", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setFloor(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setFloor(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::isMock", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::isMock()");
            }
        
            // invoke native method
            boolean result = ref.isMock();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setMock", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setMock(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setMock(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getDescription", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getDescription()");
            }
        
            // invoke native method
            String result = ref.getDescription();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setDescription", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setDescription(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setDescription(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::toStr", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::toStr()");
            }
        
            // invoke native method
            String result = ref.toStr();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::getAccuracy", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getAccuracy()");
            }
        
            // invoke native method
            float result = ref.getAccuracy();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::getBearing", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getBearing()");
            }
        
            // invoke native method
            float result = ref.getBearing();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::getAltitude", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getAltitude()");
            }
        
            // invoke native method
            double result = ref.getAltitude();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::getSpeed", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getSpeed()");
            }
        
            // invoke native method
            float result = ref.getSpeed();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::getProvider", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getProvider()");
            }
        
            // invoke native method
            String result = ref.getProvider();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::clone", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::clone()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocation result = ref.clone();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocation::getLocationQualityReport", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getLocationQualityReport()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationQualityReport result = ref.getLocationQualityReport();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocation::setLocationQualityReport", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.AMapLocationQualityReport var1 = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get((int) args.get("var1"));
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setLocationQualityReport()");
            }
        
            // invoke native method
            ref.setLocationQualityReport(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getCoordType", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getCoordType()");
            }
        
            // invoke native method
            String result = ref.getCoordType();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setCoordType", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setCoordType(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setCoordType(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::setTrustedLevel", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setTrustedLevel(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setTrustedLevel(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocation::getTrustedLevel", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getTrustedLevel()");
            }
        
            // invoke native method
            int result = ref.getTrustedLevel();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::getConScenario", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::getConScenario()");
            }
        
            // invoke native method
            int result = ref.getConScenario();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocation::setConScenario", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocation@" + refId + "::setConScenario(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setConScenario(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClientOption::getAPIKEY", (args, methodResult) -> {
            // args
        
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::getAPIKEY()");
            }
        
            // invoke native method
            String result = com.amap.api.location.AMapLocationClientOption.getAPIKEY();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::isMockEnable", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isMockEnable()");
            }
        
            // invoke native method
            boolean result = ref.isMockEnable();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setMockEnable", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setMockEnable(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setMockEnable(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::getInterval", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getInterval()");
            }
        
            // invoke native method
            long result = ref.getInterval();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setInterval", (args, methodResult) -> {
            // args
            // jsonable arg
            long var1 = (long) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setInterval(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setInterval(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isOnceLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isOnceLocation()");
            }
        
            // invoke native method
            boolean result = ref.isOnceLocation();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setOnceLocation", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setOnceLocation(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setOnceLocation(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isNeedAddress", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isNeedAddress()");
            }
        
            // invoke native method
            boolean result = ref.isNeedAddress();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setNeedAddress", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setNeedAddress(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setNeedAddress(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isWifiActiveScan", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isWifiActiveScan()");
            }
        
            // invoke native method
            boolean result = ref.isWifiActiveScan();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setWifiActiveScan", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setWifiActiveScan(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setWifiActiveScan(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isWifiScan", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isWifiScan()");
            }
        
            // invoke native method
            boolean result = ref.isWifiScan();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setWifiScan", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setWifiScan(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setWifiScan(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::getLocationMode", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getLocationMode()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.AMapLocationMode result = ref.getLocationMode();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::setLocationMode", (args, methodResult) -> {
            // args
            // enum arg
            com.amap.api.location.AMapLocationClientOption.AMapLocationMode var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationMode.values()[(int) args.get("var1")];
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setLocationMode()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setLocationMode(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::getLocationProtocol", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getLocationProtocol()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol result = ref.getLocationProtocol();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::setLocationProtocol", (args, methodResult) -> {
            // args
            // enum arg
            com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol var0 = com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol.values()[(int) args.get("var0")];
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setLocationProtocol()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.setLocationProtocol(var0);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClientOption::isKillProcess", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isKillProcess()");
            }
        
            // invoke native method
            boolean result = ref.isKillProcess();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setKillProcess", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setKillProcess(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setKillProcess(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isGpsFirst", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isGpsFirst()");
            }
        
            // invoke native method
            boolean result = ref.isGpsFirst();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setGpsFirst", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setGpsFirst(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setGpsFirst(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::setGpsFirstTimeout", (args, methodResult) -> {
            // args
            // jsonable arg
            long var1 = (long) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setGpsFirstTimeout(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setGpsFirstTimeout(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::getGpsFirstTimeout", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getGpsFirstTimeout()");
            }
        
            // invoke native method
            long result = ref.getGpsFirstTimeout();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::clone", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::clone()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.clone();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::getHttpTimeOut", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getHttpTimeOut()");
            }
        
            // invoke native method
            long result = ref.getHttpTimeOut();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setHttpTimeOut", (args, methodResult) -> {
            // args
            // jsonable arg
            long var1 = (long) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setHttpTimeOut(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setHttpTimeOut(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isOffset", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isOffset()");
            }
        
            // invoke native method
            boolean result = ref.isOffset();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setOffset", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setOffset(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setOffset(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isLocationCacheEnable", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isLocationCacheEnable()");
            }
        
            // invoke native method
            boolean result = ref.isLocationCacheEnable();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setLocationCacheEnable", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setLocationCacheEnable(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setLocationCacheEnable(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isOnceLocationLatest", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isOnceLocationLatest()");
            }
        
            // invoke native method
            boolean result = ref.isOnceLocationLatest();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setOnceLocationLatest", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setOnceLocationLatest(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setOnceLocationLatest(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isSensorEnable", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::isSensorEnable()");
            }
        
            // invoke native method
            boolean result = ref.isSensorEnable();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setSensorEnable", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setSensorEnable(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setSensorEnable(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::setLastLocationLifeCycle", (args, methodResult) -> {
            // args
            // jsonable arg
            long var1 = (long) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setLastLocationLifeCycle(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setLastLocationLifeCycle(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::getLastLocationLifeCycle", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getLastLocationLifeCycle()");
            }
        
            // invoke native method
            long result = ref.getLastLocationLifeCycle();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::getGeoLanguage", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getGeoLanguage()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.GeoLanguage result = ref.getGeoLanguage();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::setGeoLanguage", (args, methodResult) -> {
            // args
            // enum arg
            com.amap.api.location.AMapLocationClientOption.GeoLanguage var1 = com.amap.api.location.AMapLocationClientOption.GeoLanguage.values()[(int) args.get("var1")];
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setGeoLanguage()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setGeoLanguage(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::setDownloadCoordinateConvertLibrary", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var0 = (boolean) args.get("var0");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setDownloadCoordinateConvertLibrary(\"var0\":$var0)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.setDownloadCoordinateConvertLibrary(var0);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClientOption::isDownloadCoordinateConvertLibrary", (args, methodResult) -> {
            // args
        
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::isDownloadCoordinateConvertLibrary()");
            }
        
            // invoke native method
            boolean result = com.amap.api.location.AMapLocationClientOption.isDownloadCoordinateConvertLibrary();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::getDeviceModeDistanceFilter", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getDeviceModeDistanceFilter()");
            }
        
            // invoke native method
            float result = ref.getDeviceModeDistanceFilter();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setDeviceModeDistanceFilter", (args, methodResult) -> {
            // args
            // jsonable arg
            Double var1 = (Double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setDeviceModeDistanceFilter(\"var1\":$var1)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setDeviceModeDistanceFilter(var1.floatValue());
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::setLocationPurpose", (args, methodResult) -> {
            // args
            // enum arg
            com.amap.api.location.AMapLocationClientOption.AMapLocationPurpose var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationPurpose.values()[(int) args.get("var1")];
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::setLocationPurpose()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption result = ref.setLocationPurpose(var1);
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::getLocationPurpose", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getLocationPurpose()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.AMapLocationPurpose result = ref.getLocationPurpose();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.location.AMapLocationClientOption::isOpenAlwaysScanWifi", (args, methodResult) -> {
            // args
        
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::isOpenAlwaysScanWifi()");
            }
        
            // invoke native method
            boolean result = com.amap.api.location.AMapLocationClientOption.isOpenAlwaysScanWifi();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationClientOption::setOpenAlwaysScanWifi", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var0 = (boolean) args.get("var0");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setOpenAlwaysScanWifi(\"var0\":$var0)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.setOpenAlwaysScanWifi(var0);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClientOption::setScanWifiInterval", (args, methodResult) -> {
            // args
            // jsonable arg
            long var0 = (long) args.get("var0");
        
            // ref
        
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setScanWifiInterval(\"var0\":$var0)");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocationClientOption.setScanWifiInterval(var0);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationClientOption::getScanWifiInterval", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@" + refId + "::getScanWifiInterval()");
            }
        
            // invoke native method
            long result = ref.getScanWifiInterval();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.APSServiceBase::onCreate", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.APSServiceBase ref = (com.amap.api.location.APSServiceBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.APSServiceBase@" + refId + "::onCreate()");
            }
        
            // invoke native method
            ref.onCreate();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.APSServiceBase::onDestroy", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.APSServiceBase ref = (com.amap.api.location.APSServiceBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.APSServiceBase@" + refId + "::onDestroy()");
            }
        
            // invoke native method
            ref.onDestroy();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationQualityReport::setWifiAble", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::setWifiAble(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setWifiAble(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationQualityReport::setGpsStatus", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::setGpsStatus(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setGpsStatus(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationQualityReport::setGPSSatellites", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::setGPSSatellites(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setGPSSatellites(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationQualityReport::isWifiAble", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::isWifiAble()");
            }
        
            // invoke native method
            boolean result = ref.isWifiAble();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationQualityReport::getGPSStatus", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::getGPSStatus()");
            }
        
            // invoke native method
            int result = ref.getGPSStatus();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationQualityReport::getGPSSatellites", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::getGPSSatellites()");
            }
        
            // invoke native method
            int result = ref.getGPSSatellites();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationQualityReport::getNetworkType", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::getNetworkType()");
            }
        
            // invoke native method
            String result = ref.getNetworkType();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationQualityReport::setNetworkType", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::setNetworkType(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setNetworkType(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationQualityReport::getNetUseTime", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::getNetUseTime()");
            }
        
            // invoke native method
            long result = ref.getNetUseTime();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationQualityReport::setNetUseTime", (args, methodResult) -> {
            // args
            // jsonable arg
            long var1 = (long) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::setNetUseTime(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setNetUseTime(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationQualityReport::setInstallHighDangerMockApp", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::setInstallHighDangerMockApp(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setInstallHighDangerMockApp(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationQualityReport::isInstalledHighDangerMockApp", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::isInstalledHighDangerMockApp()");
            }
        
            // invoke native method
            boolean result = ref.isInstalledHighDangerMockApp();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.location.AMapLocationQualityReport::setLocationMode", (args, methodResult) -> {
            // args
            // enum arg
            com.amap.api.location.AMapLocationClientOption.AMapLocationMode var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationMode.values()[(int) args.get("var1")];
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::setLocationMode()");
            }
        
            // invoke native method
            ref.setLocationMode(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.location.AMapLocationQualityReport::getAdviseMessage", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.location.AMapLocationQualityReport ref = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@" + refId + "::getAdviseMessage()");
            }
        
            // invoke native method
            String result = ref.getAdviseMessage();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.DistrictItem::getCitycode", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.DistrictItem ref = (com.amap.api.fence.DistrictItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.DistrictItem@" + refId + "::getCitycode()");
            }
        
            // invoke native method
            String result = ref.getCitycode();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.DistrictItem::setCitycode", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.DistrictItem ref = (com.amap.api.fence.DistrictItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.DistrictItem@" + refId + "::setCitycode(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setCitycode(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.DistrictItem::getAdcode", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.DistrictItem ref = (com.amap.api.fence.DistrictItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.DistrictItem@" + refId + "::getAdcode()");
            }
        
            // invoke native method
            String result = ref.getAdcode();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.DistrictItem::setAdcode", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.DistrictItem ref = (com.amap.api.fence.DistrictItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.DistrictItem@" + refId + "::setAdcode(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setAdcode(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.DistrictItem::getPolyline", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.DistrictItem ref = (com.amap.api.fence.DistrictItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.DistrictItem@" + refId + "::getPolyline()");
            }
        
            // invoke native method
            List<com.amap.api.location.DPoint> result = ref.getPolyline();
        
            // result
            if (result != null) {
                List<Integer> resultRefIdList = new ArrayList<>();
                for (com.amap.api.location.DPoint item : result) {
                    getHEAP().put(item.hashCode(), item);
                    resultRefIdList.add(item.hashCode());
                }
                methodResult.success(resultRefIdList);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.fence.DistrictItem::setPolyline", (args, methodResult) -> {
            // args
            // list arg
            List<Integer> var1RefIdList = (List<Integer>) args.get("var1");
            List<com.amap.api.location.DPoint> var1 = new ArrayList<>();
            for (int refId : var1RefIdList) {
                var1.add((com.amap.api.location.DPoint) getHEAP().get(refId));
            }
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.DistrictItem ref = (com.amap.api.fence.DistrictItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.DistrictItem@" + refId + "::setPolyline()");
            }
        
            // invoke native method
            ref.setPolyline(new ArrayList(var1));
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.DistrictItem::getDistrictName", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.DistrictItem ref = (com.amap.api.fence.DistrictItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.DistrictItem@" + refId + "::getDistrictName()");
            }
        
            // invoke native method
            String result = ref.getDistrictName();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.DistrictItem::setDistrictName", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.DistrictItem ref = (com.amap.api.fence.DistrictItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.DistrictItem@" + refId + "::setDistrictName(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setDistrictName(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceClient::setActivateAction", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::setActivateAction(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setActivateAction(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceClient::setGeoFenceListener", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::setGeoFenceListener()");
            }
        
            // invoke native method
            ref.setGeoFenceListener(new com.amap.api.fence.GeoFenceListener() {
                // method channel
                MethodChannel callbackChannel = new MethodChannel(registrar.messenger(), "com.amap.api.fence.GeoFenceClient::setGeoFenceListener::Callback");
        
                // call dart method
                @Override
                public void onGeoFenceCreateFinished(List<com.amap.api.fence.GeoFence> var1, int var2, String var3) {
                    // print log
                    Log.d("kotlin-callback", "fluttify-kotlin-callback: onGeoFenceCreateFinished([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])");
        
                    // convert to jsonable data
                    List<Integer> argvar1 = new ArrayList<>();
                    for (com.amap.api.fence.GeoFence item : var1) {
                        getHEAP().put(item.hashCode(), item);
                        argvar1.add(item.hashCode());
                    }
                    int argvar2 = var2;
                    String argvar3 = var3;
        
                    // call dart method
                    callbackChannel.invokeMethod(
                            "Callback::com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished",
                            new HashMap<String, Object>() {{
                                put("var1", argvar1);
                                put("var2", argvar2);
                                put("var3", argvar3);
                            }}
                    );
        
                    // method result
        
                }
        
            });
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceClient::addGeoFence", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) args.get("var1"));
            // jsonable arg
            Double var2 = (Double) args.get("var2");
            // jsonable arg
            String var3 = (String) args.get("var3");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::addGeoFence(\"var2\":$var2, \"var3\":$var3)");
            }
        
            // invoke native method
            ref.addGeoFence(var1, var2.floatValue(), var3);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceClient::removeGeoFence", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::removeGeoFence()");
            }
        
            // invoke native method
            ref.removeGeoFence();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceClient::getAllGeoFence", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::getAllGeoFence()");
            }
        
            // invoke native method
            List<com.amap.api.fence.GeoFence> result = ref.getAllGeoFence();
        
            // result
            if (result != null) {
                List<Integer> resultRefIdList = new ArrayList<>();
                for (com.amap.api.fence.GeoFence item : result) {
                    getHEAP().put(item.hashCode(), item);
                    resultRefIdList.add(item.hashCode());
                }
                methodResult.success(resultRefIdList);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.fence.GeoFenceClient::setGeoFenceAble", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
            // jsonable arg
            boolean var2 = (boolean) args.get("var2");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::setGeoFenceAble(\"var1\":$var1, \"var2\":$var2)");
            }
        
            // invoke native method
            ref.setGeoFenceAble(var1, var2);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceClient::pauseGeoFence", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::pauseGeoFence()");
            }
        
            // invoke native method
            ref.pauseGeoFence();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceClient::resumeGeoFence", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::resumeGeoFence()");
            }
        
            // invoke native method
            ref.resumeGeoFence();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceClient::isPause", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceClient ref = (com.amap.api.fence.GeoFenceClient) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceClient@" + refId + "::isPause()");
            }
        
            // invoke native method
            boolean result = ref.isPause();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished", (args, methodResult) -> {
            // args
            // list arg
            List<Integer> var1RefIdList = (List<Integer>) args.get("var1");
            List<com.amap.api.fence.GeoFence> var1 = new ArrayList<>();
            for (int refId : var1RefIdList) {
                var1.add((com.amap.api.fence.GeoFence) getHEAP().get(refId));
            }
            // jsonable arg
            int var2 = (int) args.get("var2");
            // jsonable arg
            String var3 = (String) args.get("var3");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceListener ref = (com.amap.api.fence.GeoFenceListener) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceListener@" + refId + "::onGeoFenceCreateFinished(\"var2\":$var2, \"var3\":$var3)");
            }
        
            // invoke native method
            ref.onGeoFenceCreateFinished(new ArrayList(var1), var2, var3);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getFenceId", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getFenceId()");
            }
        
            // invoke native method
            String result = ref.getFenceId();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setFenceId", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setFenceId(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setFenceId(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getCustomId", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getCustomId()");
            }
        
            // invoke native method
            String result = ref.getCustomId();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setCustomId", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setCustomId(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setCustomId(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getPendingIntentAction", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getPendingIntentAction()");
            }
        
            // invoke native method
            String result = ref.getPendingIntentAction();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setPendingIntentAction", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setPendingIntentAction(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setPendingIntentAction(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getType", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getType()");
            }
        
            // invoke native method
            int result = ref.getType();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setType", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setType(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setType(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getPoiItem", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getPoiItem()");
            }
        
            // invoke native method
            com.amap.api.fence.PoiItem result = ref.getPoiItem();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.fence.GeoFence::setPoiItem", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.fence.PoiItem var1 = (com.amap.api.fence.PoiItem) getHEAP().get((int) args.get("var1"));
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setPoiItem()");
            }
        
            // invoke native method
            ref.setPoiItem(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getDistrictItemList", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getDistrictItemList()");
            }
        
            // invoke native method
            List<com.amap.api.fence.DistrictItem> result = ref.getDistrictItemList();
        
            // result
            if (result != null) {
                List<Integer> resultRefIdList = new ArrayList<>();
                for (com.amap.api.fence.DistrictItem item : result) {
                    getHEAP().put(item.hashCode(), item);
                    resultRefIdList.add(item.hashCode());
                }
                methodResult.success(resultRefIdList);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.fence.GeoFence::setDistrictItemList", (args, methodResult) -> {
            // args
            // list arg
            List<Integer> var1RefIdList = (List<Integer>) args.get("var1");
            List<com.amap.api.fence.DistrictItem> var1 = new ArrayList<>();
            for (int refId : var1RefIdList) {
                var1.add((com.amap.api.fence.DistrictItem) getHEAP().get(refId));
            }
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setDistrictItemList()");
            }
        
            // invoke native method
            ref.setDistrictItemList(new ArrayList(var1));
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getPointList", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getPointList()");
            }
        
            // invoke native method
            List<List<com.amap.api.location.DPoint>> result = ref.getPointList();
        
            // result
            methodResult.success(new ArrayList());
        });
        put("com.amap.api.fence.GeoFence::setPointList", (args, methodResult) -> {
            // args
            List<com.amap.api.location.DPoint> var1 = new ArrayList<>();
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setPointList()");
            }
        
            // invoke native method
            ref.setPointList(new ArrayList(var1));
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getRadius", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getRadius()");
            }
        
            // invoke native method
            float result = ref.getRadius();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setRadius", (args, methodResult) -> {
            // args
            // jsonable arg
            Double var1 = (Double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setRadius(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setRadius(var1.floatValue());
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getExpiration", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getExpiration()");
            }
        
            // invoke native method
            long result = ref.getExpiration();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setExpiration", (args, methodResult) -> {
            // args
            // jsonable arg
            long var1 = (long) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setExpiration(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setExpiration(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getActivatesAction", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getActivatesAction()");
            }
        
            // invoke native method
            int result = ref.getActivatesAction();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setActivatesAction", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setActivatesAction(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setActivatesAction(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getStatus", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getStatus()");
            }
        
            // invoke native method
            int result = ref.getStatus();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setStatus", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setStatus(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setStatus(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getEnterTime", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getEnterTime()");
            }
        
            // invoke native method
            long result = ref.getEnterTime();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setEnterTime", (args, methodResult) -> {
            // args
            // jsonable arg
            long var1 = (long) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setEnterTime(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setEnterTime(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getCenter", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getCenter()");
            }
        
            // invoke native method
            com.amap.api.location.DPoint result = ref.getCenter();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.fence.GeoFence::setCenter", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) args.get("var1"));
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setCenter()");
            }
        
            // invoke native method
            ref.setCenter(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getMinDis2Center", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getMinDis2Center()");
            }
        
            // invoke native method
            float result = ref.getMinDis2Center();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setMinDis2Center", (args, methodResult) -> {
            // args
            // jsonable arg
            Double var1 = (Double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setMinDis2Center(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setMinDis2Center(var1.floatValue());
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getMaxDis2Center", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getMaxDis2Center()");
            }
        
            // invoke native method
            float result = ref.getMaxDis2Center();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setMaxDis2Center", (args, methodResult) -> {
            // args
            // jsonable arg
            Double var1 = (Double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setMaxDis2Center(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setMaxDis2Center(var1.floatValue());
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::isAble", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::isAble()");
            }
        
            // invoke native method
            boolean result = ref.isAble();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.GeoFence::setAble", (args, methodResult) -> {
            // args
            // jsonable arg
            boolean var1 = (boolean) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setAble(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setAble(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::setCurrentLocation", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.AMapLocation var1 = (com.amap.api.location.AMapLocation) getHEAP().get((int) args.get("var1"));
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::setCurrentLocation()");
            }
        
            // invoke native method
            ref.setCurrentLocation(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFence::getCurrentLocation", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFence@" + refId + "::getCurrentLocation()");
            }
        
            // invoke native method
            com.amap.api.location.AMapLocation result = ref.getCurrentLocation();
        
            // result
            if (result != null) {
                int returnRefId = result.hashCode();
                getHEAP().put(returnRefId, result);
        
                methodResult.success(returnRefId);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.fence.GeoFenceManagerBase::setActivateAction", (args, methodResult) -> {
            // args
            // jsonable arg
            int var1 = (int) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::setActivateAction(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setActivateAction(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::setGeoFenceListener", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::setGeoFenceListener()");
            }
        
            // invoke native method
            ref.setGeoFenceListener(new com.amap.api.fence.GeoFenceListener() {
                // method channel
                MethodChannel callbackChannel = new MethodChannel(registrar.messenger(), "com.amap.api.fence.GeoFenceManagerBase::setGeoFenceListener::Callback");
        
                // call dart method
                @Override
                public void onGeoFenceCreateFinished(List<com.amap.api.fence.GeoFence> var1, int var2, String var3) {
                    // print log
                    Log.d("kotlin-callback", "fluttify-kotlin-callback: onGeoFenceCreateFinished([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])");
        
                    // convert to jsonable data
                    List<Integer> argvar1 = new ArrayList<>();
                    for (com.amap.api.fence.GeoFence item : var1) {
                        getHEAP().put(item.hashCode(), item);
                        argvar1.add(item.hashCode());
                    }
                    int argvar2 = var2;
                    String argvar3 = var3;
        
                    // call dart method
                    callbackChannel.invokeMethod(
                            "Callback::com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished",
                            new HashMap<String, Object>() {{
                                put("var1", argvar1);
                                put("var2", argvar2);
                                put("var3", argvar3);
                            }}
                    );
        
                    // method result
        
                }
        
            });
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::addRoundGeoFence", (args, methodResult) -> {
            // args
            // ref arg
            com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) args.get("var1"));
            // jsonable arg
            Double var2 = (Double) args.get("var2");
            // jsonable arg
            String var3 = (String) args.get("var3");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addRoundGeoFence(\"var2\":$var2, \"var3\":$var3)");
            }
        
            // invoke native method
            ref.addRoundGeoFence(var1, var2.floatValue(), var3);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::addPolygonGeoFence", (args, methodResult) -> {
            // args
            // list arg
            List<Integer> var1RefIdList = (List<Integer>) args.get("var1");
            List<com.amap.api.location.DPoint> var1 = new ArrayList<>();
            for (int refId : var1RefIdList) {
                var1.add((com.amap.api.location.DPoint) getHEAP().get(refId));
            }
            // jsonable arg
            String var2 = (String) args.get("var2");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addPolygonGeoFence(\"var2\":$var2)");
            }
        
            // invoke native method
            ref.addPolygonGeoFence(new ArrayList(var1), var2);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::addNearbyGeoFence", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
            // jsonable arg
            String var2 = (String) args.get("var2");
            // ref arg
            com.amap.api.location.DPoint var3 = (com.amap.api.location.DPoint) getHEAP().get((int) args.get("var3"));
            // jsonable arg
            Double var4 = (Double) args.get("var4");
            // jsonable arg
            int var5 = (int) args.get("var5");
            // jsonable arg
            String var6 = (String) args.get("var6");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addNearbyGeoFence(\"var1\":$var1, \"var2\":$var2, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6)");
            }
        
            // invoke native method
            ref.addNearbyGeoFence(var1, var2, var3, var4.floatValue(), var5, var6);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::addKeywordGeoFence", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
            // jsonable arg
            String var2 = (String) args.get("var2");
            // jsonable arg
            String var3 = (String) args.get("var3");
            // jsonable arg
            int var4 = (int) args.get("var4");
            // jsonable arg
            String var5 = (String) args.get("var5");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addKeywordGeoFence(\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5)");
            }
        
            // invoke native method
            ref.addKeywordGeoFence(var1, var2, var3, var4, var5);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::addDistrictGeoFence", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
            // jsonable arg
            String var2 = (String) args.get("var2");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addDistrictGeoFence(\"var1\":$var1, \"var2\":$var2)");
            }
        
            // invoke native method
            ref.addDistrictGeoFence(var1, var2);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::removeGeoFence", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::removeGeoFence()");
            }
        
            // invoke native method
            ref.removeGeoFence();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::getAllGeoFence", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::getAllGeoFence()");
            }
        
            // invoke native method
            List<com.amap.api.fence.GeoFence> result = ref.getAllGeoFence();
        
            // result
            if (result != null) {
                List<Integer> resultRefIdList = new ArrayList<>();
                for (com.amap.api.fence.GeoFence item : result) {
                    getHEAP().put(item.hashCode(), item);
                    resultRefIdList.add(item.hashCode());
                }
                methodResult.success(resultRefIdList);
            } else {
                methodResult.success(null);
            }
        });
        put("com.amap.api.fence.GeoFenceManagerBase::setGeoFenceAble", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
            // jsonable arg
            boolean var2 = (boolean) args.get("var2");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::setGeoFenceAble(\"var1\":$var1, \"var2\":$var2)");
            }
        
            // invoke native method
            ref.setGeoFenceAble(var1, var2);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::pauseGeoFence", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::pauseGeoFence()");
            }
        
            // invoke native method
            ref.pauseGeoFence();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::resumeGeoFence", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::resumeGeoFence()");
            }
        
            // invoke native method
            ref.resumeGeoFence();
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.GeoFenceManagerBase::isPause", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::isPause()");
            }
        
            // invoke native method
            boolean result = ref.isPause();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::getLatitude", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getLatitude()");
            }
        
            // invoke native method
            double result = ref.getLatitude();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setLatitude", (args, methodResult) -> {
            // args
            // jsonable arg
            double var1 = (double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setLatitude(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setLatitude(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getLongitude", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getLongitude()");
            }
        
            // invoke native method
            double result = ref.getLongitude();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setLongitude", (args, methodResult) -> {
            // args
            // jsonable arg
            double var1 = (double) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setLongitude(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setLongitude(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getPoiId", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getPoiId()");
            }
        
            // invoke native method
            String result = ref.getPoiId();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setPoiId", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setPoiId(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setPoiId(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getPoiType", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getPoiType()");
            }
        
            // invoke native method
            String result = ref.getPoiType();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setPoiType", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setPoiType(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setPoiType(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getTypeCode", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getTypeCode()");
            }
        
            // invoke native method
            String result = ref.getTypeCode();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setTypeCode", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setTypeCode(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setTypeCode(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getAddress", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getAddress()");
            }
        
            // invoke native method
            String result = ref.getAddress();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setAddress", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setAddress(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setAddress(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getTel", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getTel()");
            }
        
            // invoke native method
            String result = ref.getTel();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setTel", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setTel(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setTel(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getProvince", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getProvince()");
            }
        
            // invoke native method
            String result = ref.getProvince();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setProvince", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setProvince(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setProvince(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getCity", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getCity()");
            }
        
            // invoke native method
            String result = ref.getCity();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setCity", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setCity(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setCity(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::getAdname", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getAdname()");
            }
        
            // invoke native method
            String result = ref.getAdname();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::getPoiName", (args, methodResult) -> {
            // args
        
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::getPoiName()");
            }
        
            // invoke native method
            String result = ref.getPoiName();
        
            // result
            methodResult.success(result);
        });
        put("com.amap.api.fence.PoiItem::setPoiName", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setPoiName(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setPoiName(var1);
        
            // result
            methodResult.success("success");
        });
        put("com.amap.api.fence.PoiItem::setAdname", (args, methodResult) -> {
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // ref
            int refId = (int) args.get("refId");
            com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
        
            // print log
            if (BuildConfig.DEBUG) {
                Log.d("fluttify-kotlin", "fluttify-kotlin: com.amap.api.fence.PoiItem@" + refId + "::setAdname(\"var1\":$var1)");
            }
        
            // invoke native method
            ref.setAdname(var1);
        
            // result
            methodResult.success("success");
        });
        put("ObjectFactory::createcom_autonavi_aps_amapapi_model_AMapLocationServer__String", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_autonavi_aps_amapapi_model_AMapLocationServer__String");
        
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // create target object
            com.autonavi.aps.amapapi.model.AMapLocationServer obj = new com.autonavi.aps.amapapi.model.AMapLocationServer(var1);
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_AMapLocationClient__android_content_Context", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocationClient__android_content_Context");
        
            // args
            // ref arg
            android.content.Context var1 = (android.content.Context) getHEAP().get((int) args.get("var1"));
        
            // create target object
            com.amap.api.location.AMapLocationClient obj = new com.amap.api.location.AMapLocationClient(var1);
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_DPoint__", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_DPoint__");
        
            // args
        
        
            // create target object
            com.amap.api.location.DPoint obj = new com.amap.api.location.DPoint();
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_DPoint__double__double", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_DPoint__double__double");
        
            // args
            // jsonable arg
            double var1 = (double) args.get("var1");
            // jsonable arg
            double var3 = (double) args.get("var3");
        
            // create target object
            com.amap.api.location.DPoint obj = new com.amap.api.location.DPoint(var1, var3);
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_CoordinateConverter__android_content_Context", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_CoordinateConverter__android_content_Context");
        
            // args
            // ref arg
            android.content.Context var1 = (android.content.Context) getHEAP().get((int) args.get("var1"));
        
            // create target object
            com.amap.api.location.CoordinateConverter obj = new com.amap.api.location.CoordinateConverter(var1);
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_CoordUtil__", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_CoordUtil__");
        
            // args
        
        
            // create target object
            com.amap.api.location.CoordUtil obj = new com.amap.api.location.CoordUtil();
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_UmidtokenInfo__", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_UmidtokenInfo__");
        
            // args
        
        
            // create target object
            com.amap.api.location.UmidtokenInfo obj = new com.amap.api.location.UmidtokenInfo();
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_AMapLocation__String", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocation__String");
        
            // args
            // jsonable arg
            String var1 = (String) args.get("var1");
        
            // create target object
            com.amap.api.location.AMapLocation obj = new com.amap.api.location.AMapLocation(var1);
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_AMapLocation__android_location_Location", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocation__android_location_Location");
        
            // args
            // ref arg
            android.location.Location var1 = (android.location.Location) getHEAP().get((int) args.get("var1"));
        
            // create target object
            com.amap.api.location.AMapLocation obj = new com.amap.api.location.AMapLocation(var1);
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_AMapLocationClientOption__", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocationClientOption__");
        
            // args
        
        
            // create target object
            com.amap.api.location.AMapLocationClientOption obj = new com.amap.api.location.AMapLocationClientOption();
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_location_AMapLocationQualityReport__", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_location_AMapLocationQualityReport__");
        
            // args
        
        
            // create target object
            com.amap.api.location.AMapLocationQualityReport obj = new com.amap.api.location.AMapLocationQualityReport();
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_fence_DistrictItem__", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_fence_DistrictItem__");
        
            // args
        
        
            // create target object
            com.amap.api.fence.DistrictItem obj = new com.amap.api.fence.DistrictItem();
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_fence_GeoFenceClient__android_content_Context", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_fence_GeoFenceClient__android_content_Context");
        
            // args
            // ref arg
            android.content.Context var1 = (android.content.Context) getHEAP().get((int) args.get("var1"));
        
            // create target object
            com.amap.api.fence.GeoFenceClient obj = new com.amap.api.fence.GeoFenceClient(var1);
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_fence_GeoFence__", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_fence_GeoFence__");
        
            // args
        
        
            // create target object
            com.amap.api.fence.GeoFence obj = new com.amap.api.fence.GeoFence();
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
        put("ObjectFactory::createcom_amap_api_fence_PoiItem__", (args, methodResult) -> {
            Log.d("ObjectFactory", "创建对象: com_amap_api_fence_PoiItem__");
        
            // args
        
        
            // create target object
            com.amap.api.fence.PoiItem obj = new com.amap.api.fence.PoiItem();
            getHEAP().put(obj.hashCode(), obj);
        
            // print current HEAP
            if (BuildConfig.DEBUG) {
                Log.d("ObjectFactory", "HEAP: " + getHEAP());
            }
        
            methodResult.success(obj.hashCode());
        });
    }};

    public static void registerWith(Registrar registrar) {
        MethodChannel channel = new MethodChannel(registrar.messenger(), "me.yohom/amap_location_fluttify");
        channel.setMethodCallHandler(new AmapLocationFluttifyPlugin(registrar));

        // register platform view
        
    }

    @Override
    public void onMethodCall(@NonNull MethodCall methodCall, @NonNull MethodChannel.Result methodResult) {
        Map<String, Object> args = (Map<String, Object>) methodCall.arguments;
        Handler handler = handlerMap.get(methodCall.method);
        if (handler != null) {
            try {
                handler.call(args, methodResult);
            } catch (Exception e) {
                e.printStackTrace();
                methodResult.error(e.getMessage(), null, null);
            }
        } else {
            methodResult.notImplemented();
        }
    }

    @FunctionalInterface
    interface Handler {
        void call(Map<String, Object> args, MethodChannel.Result methodResult) throws Exception;
    }
}
