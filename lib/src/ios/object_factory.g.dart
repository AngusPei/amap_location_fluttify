//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:amap_location_fluttify/src/ios/ios.export.g.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class AmapLocationFluttifyFactoryIOS {
  static final _channel = MethodChannel('me.yohom/amap_location_fluttify');

  static Future<AMapGeoFenceManager> createAMapGeoFenceManager() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeoFenceManager');
    final object = AMapGeoFenceManager()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationRegion> createAMapLocationRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationRegion');
    final object = AMapLocationRegion()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationCircleRegion> createAMapLocationCircleRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationCircleRegion');
    final object = AMapLocationCircleRegion()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationPolygonRegion> createAMapLocationPolygonRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationPolygonRegion');
    final object = AMapLocationPolygonRegion()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeoFenceRegion> createAMapGeoFenceRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeoFenceRegion');
    final object = AMapGeoFenceRegion()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeoFenceCircleRegion> createAMapGeoFenceCircleRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeoFenceCircleRegion');
    final object = AMapGeoFenceCircleRegion()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeoFencePolygonRegion> createAMapGeoFencePolygonRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeoFencePolygonRegion');
    final object = AMapGeoFencePolygonRegion()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeoFencePOIRegion> createAMapGeoFencePOIRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeoFencePOIRegion');
    final object = AMapGeoFencePOIRegion()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeoFenceDistrictRegion> createAMapGeoFenceDistrictRegion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeoFenceDistrictRegion');
    final object = AMapGeoFenceDistrictRegion()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationManager> createAMapLocationManager() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationManager');
    final object = AMapLocationManager()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationReGeocode> createAMapLocationReGeocode() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationReGeocode');
    final object = AMapLocationReGeocode()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationPoint> createAMapLocationPoint() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationPoint');
    final object = AMapLocationPoint()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationPOIItem> createAMapLocationPOIItem() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationPOIItem');
    final object = AMapLocationPOIItem()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationDistrictItem> createAMapLocationDistrictItem() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationDistrictItem');
    final object = AMapLocationDistrictItem()..refId = refId..tag = 'amap_location_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
}
