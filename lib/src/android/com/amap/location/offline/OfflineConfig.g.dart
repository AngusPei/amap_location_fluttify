//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_location_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_location_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_amap_location_offline_OfflineConfig extends java_lang_Object  {
  // generate getters
  Future<int> get_productId() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_productId", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_packageName() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_packageName", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_productVersion() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_productVersion", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_adiu() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_adiu", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_imei() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_imei", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_imsi() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_imsi", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_uuid() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_uuid", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_license() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_license", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_mapKey() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_mapKey", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_locEnable() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_locEnable", {'refId': refId});
  
    return result;
  }
  
  Future<List<String>> get_contentProviderList() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_contentProviderList", {'refId': refId});
  
    return (result as List).cast<String>();
  }
  
  Future<com_amap_location_offline_upload_UploadConfig> get_uploadConfig() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.OfflineConfig::get_uploadConfig", {'refId': refId});
    kNativeObjectPool.add(com_amap_location_offline_upload_UploadConfig()..refId = result..tag = 'amap_location_fluttify');
    return com_amap_location_offline_upload_UploadConfig()..refId = result..tag = 'amap_location_fluttify';
  }
  

  // generate setters
  Future<void> set_productId(int productId) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_productId', {'refId': refId, "productId": productId});
  
  
  }
  
  Future<void> set_packageName(String packageName) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_packageName', {'refId': refId, "packageName": packageName});
  
  
  }
  
  Future<void> set_productVersion(String productVersion) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_productVersion', {'refId': refId, "productVersion": productVersion});
  
  
  }
  
  Future<void> set_adiu(String adiu) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_adiu', {'refId': refId, "adiu": adiu});
  
  
  }
  
  Future<void> set_imei(String imei) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_imei', {'refId': refId, "imei": imei});
  
  
  }
  
  Future<void> set_imsi(String imsi) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_imsi', {'refId': refId, "imsi": imsi});
  
  
  }
  
  Future<void> set_uuid(String uuid) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_uuid', {'refId': refId, "uuid": uuid});
  
  
  }
  
  Future<void> set_license(String license) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_license', {'refId': refId, "license": license});
  
  
  }
  
  Future<void> set_mapKey(String mapKey) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_mapKey', {'refId': refId, "mapKey": mapKey});
  
  
  }
  
  Future<void> set_locEnable(bool locEnable) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_locEnable', {'refId': refId, "locEnable": locEnable});
  
  
  }
  
  Future<void> set_contentProviderList(List<String> contentProviderList) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_contentProviderList', {'refId': refId, "contentProviderList": contentProviderList});
  
  
  }
  
  Future<void> set_mLocateLogRecorder(com_amap_location_offline_OfflineConfig_ILocateLogRecorder mLocateLogRecorder) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_mLocateLogRecorder', {'refId': refId, "mLocateLogRecorder": mLocateLogRecorder.refId});
  
    MethodChannel('com.amap.location.offline.OfflineConfig.ILocateLogRecorder::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::com.amap.location.offline.OfflineConfig.ILocateLogRecorder::onLocateSuccess':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onLocateSuccess([\'var1\':$args[var1]])');
            }
        
            // handle the native call
            mLocateLogRecorder?.onLocateSuccess(args['var1']);
            break;
          default:
            break;
        }
      });
  }
  
  Future<void> set_httpClient(com_amap_location_common_network_IHttpClient httpClient) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_httpClient', {'refId': refId, "httpClient": httpClient.refId});
  
    MethodChannel('com.amap.location.common.network.IHttpClient::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::com.amap.location.common.network.IHttpClient::post':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: post([])');
            }
        
            // handle the native call
            httpClient?.post(com_amap_location_common_network_HttpRequest()..refId = (args['var1'])..tag = 'amap_location_fluttify');
            break;
          default:
            break;
        }
      });
  }
  
  Future<void> set_uploadConfig(com_amap_location_offline_upload_UploadConfig uploadConfig) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_uploadConfig', {'refId': refId, "uploadConfig": uploadConfig.refId});
  
  
  }
  
  Future<void> set_coordinateConverter(com_amap_location_offline_OfflineConfig_ICoordinateConverter coordinateConverter) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineConfig::set_coordinateConverter', {'refId': refId, "coordinateConverter": coordinateConverter.refId});
  
    MethodChannel('com.amap.location.offline.OfflineConfig.ICoordinateConverter::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::com.amap.location.offline.OfflineConfig.ICoordinateConverter::wgsToGcj':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: wgsToGcj([\'var1\':$args[var1]])');
            }
        
            // handle the native call
            coordinateConverter?.wgsToGcj(args['var1']);
            break;
          default:
            break;
        }
      });
  }
  

  // generate methods
  
}