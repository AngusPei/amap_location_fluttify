//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_location_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_location_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_amap_location_offline_OfflineManager extends java_lang_Object  {
  // generate getters
  

  // generate setters
  

  // generate methods
  static Future<com_amap_location_offline_OfflineManager> getInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.offline.OfflineManager::getInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineManager::getInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_location_offline_OfflineManager()..refId = result..tag = 'amap_location_fluttify');
      return com_amap_location_offline_OfflineManager()..refId = result..tag = 'amap_location_fluttify';
    }
  }
  
  Future<void> init(android_content_Context var1, com_amap_location_offline_OfflineConfig var2, com_amap_location_offline_IOfflineCloudConfig var3) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.offline.OfflineManager@$refId::init([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineManager::init', {"var1": var1.refId, "var2": var2.refId, "refId": refId});
  
  
    // handle native call
    MethodChannel('com.amap.location.offline.OfflineManager::init::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::isEnable':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: isEnable([])');
              }
        
              // handle the native call
              var3?.isEnable();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::getConfigTime':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: getConfigTime([])');
              }
        
              // handle the native call
              var3?.getConfigTime();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::clearAll':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: clearAll([])');
              }
        
              // handle the native call
              var3?.clearAll();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::getTrainingThreshold':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: getTrainingThreshold([])');
              }
        
              // handle the native call
              var3?.getTrainingThreshold();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::getMinWifiNum':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: getMinWifiNum([])');
              }
        
              // handle the native call
              var3?.getMinWifiNum();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::getContentProviderList':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: getContentProviderList([])');
              }
        
              // handle the native call
              var3?.getContentProviderList();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::getMaxRequestTimes':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: getMaxRequestTimes([])');
              }
        
              // handle the native call
              var3?.getMaxRequestTimes();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::getMaxNonWifiRequestTimes':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: getMaxNonWifiRequestTimes([])');
              }
        
              // handle the native call
              var3?.getMaxNonWifiRequestTimes();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::getMaxNumPerRequest':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: getMaxNumPerRequest([])');
              }
        
              // handle the native call
              var3?.getMaxNumPerRequest();
              break;
            case 'Callback::com.amap.location.offline.IOfflineCloudConfig::getNeedFirstDownload':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: getNeedFirstDownload([])');
              }
        
              // handle the native call
              var3?.getNeedFirstDownload();
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> destroy() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.offline.OfflineManager@$refId::destroy([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineManager::destroy', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> updateConfig(com_amap_location_offline_OfflineConfig var1) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.offline.OfflineManager@$refId::updateConfig([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineManager::updateConfig', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> isEnable() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.offline.OfflineManager@$refId::isEnable([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineManager::isEnable', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<com_amap_location_common_model_AmapLoc> getLocation(com_amap_location_common_model_FPS var1, bool var2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.offline.OfflineManager@$refId::getLocation([\'var2\':$var2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineManager::getLocation', {"var1": var1.refId, "var2": var2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_location_common_model_AmapLoc()..refId = result..tag = 'amap_location_fluttify');
      return com_amap_location_common_model_AmapLoc()..refId = result..tag = 'amap_location_fluttify';
    }
  }
  
  Future<void> trainingFps(com_amap_location_common_model_FPS var1) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.offline.OfflineManager@$refId::trainingFps([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineManager::trainingFps', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> correctLocation(com_amap_location_common_model_FPS var1, com_amap_location_common_model_AmapLoc var2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.offline.OfflineManager@$refId::correctLocation([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.OfflineManager::correctLocation', {"var1": var1.refId, "var2": var2.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}