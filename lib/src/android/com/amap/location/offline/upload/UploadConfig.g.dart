//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_location_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_location_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_amap_location_offline_upload_UploadConfig extends java_lang_Object  {
  // generate getters
  Future<int> get_bufferSize() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.upload.UploadConfig::get_bufferSize", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_maxDbSize() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.upload.UploadConfig::get_maxDbSize", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_expireTimeInDb() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.upload.UploadConfig::get_expireTimeInDb", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_storePeriod() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.upload.UploadConfig::get_storePeriod", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_uploadPeriod() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.upload.UploadConfig::get_uploadPeriod", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_sizePerRequest() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.upload.UploadConfig::get_sizePerRequest", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_maxSizePerDay() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.upload.UploadConfig::get_maxSizePerDay", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_nonWifiEnable() async {
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod("com.amap.location.offline.upload.UploadConfig::get_nonWifiEnable", {'refId': refId});
  
    return result;
  }
  

  // generate setters
  Future<void> set_bufferSize(int bufferSize) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.upload.UploadConfig::set_bufferSize', {'refId': refId, "bufferSize": bufferSize});
  
  
  }
  
  Future<void> set_maxDbSize(int maxDbSize) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.upload.UploadConfig::set_maxDbSize', {'refId': refId, "maxDbSize": maxDbSize});
  
  
  }
  
  Future<void> set_expireTimeInDb(int expireTimeInDb) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.upload.UploadConfig::set_expireTimeInDb', {'refId': refId, "expireTimeInDb": expireTimeInDb});
  
  
  }
  
  Future<void> set_storePeriod(int storePeriod) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.upload.UploadConfig::set_storePeriod', {'refId': refId, "storePeriod": storePeriod});
  
  
  }
  
  Future<void> set_uploadPeriod(int uploadPeriod) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.upload.UploadConfig::set_uploadPeriod', {'refId': refId, "uploadPeriod": uploadPeriod});
  
  
  }
  
  Future<void> set_sizePerRequest(int sizePerRequest) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.upload.UploadConfig::set_sizePerRequest', {'refId': refId, "sizePerRequest": sizePerRequest});
  
  
  }
  
  Future<void> set_maxSizePerDay(int maxSizePerDay) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.upload.UploadConfig::set_maxSizePerDay', {'refId': refId, "maxSizePerDay": maxSizePerDay});
  
  
  }
  
  Future<void> set_nonWifiEnable(bool nonWifiEnable) async {
    await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.offline.upload.UploadConfig::set_nonWifiEnable', {'refId': refId, "nonWifiEnable": nonWifiEnable});
  
  
  }
  

  // generate methods
  
}