//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_location_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_location_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_amap_location_collection_CollectionManagerProxy extends java_lang_Object  {
  // generate getters
  

  // generate setters
  

  // generate methods
  Future<void> init(android_content_Context var1, com_amap_location_collection_CollectionConfig var2, com_amap_location_common_network_IHttpClient var3) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.collection.CollectionManagerProxy@$refId::init([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.collection.CollectionManagerProxy::init', {"var1": var1.refId, "var2": var2.refId, "refId": refId});
  
  
    // handle native call
    MethodChannel('com.amap.location.collection.CollectionManagerProxy::init::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::com.amap.location.common.network.IHttpClient::post':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: post([])');
              }
        
              // handle the native call
              var3?.post(com_amap_location_common_network_HttpRequest()..refId = (args['var1'])..tag = 'amap_location_fluttify');
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> destroy() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.collection.CollectionManagerProxy@$refId::destroy([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.collection.CollectionManagerProxy::destroy', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> getVersion() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.amap.location.collection.CollectionManagerProxy::getVersion([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_location_fluttify').invokeMethod('com.amap.location.collection.CollectionManagerProxy::getVersion', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}