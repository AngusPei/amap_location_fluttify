//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "AmapLocationFluttifyPlugin.h"

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
NSMutableDictionary<NSString*, NSObject*>* STACK_AmapLocationFluttify;
// Dart端随机存取对象的容器
NSMutableDictionary<NSNumber*, NSObject*>* HEAP_AmapLocationFluttify;

@implementation AmapLocationFluttifyPlugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      @"AMapGeoFenceManager::addCircleRegionForMonitoringWithCenterRadiuscustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 结构体参数
          NSValue* centerValue = (NSValue*) HEAP_AmapLocationFluttify[@([args[@"center"] integerValue])];
          CLLocationCoordinate2D center;
          [centerValue getValue:&center];
          // jsonable参数
          CLLocationDistance radius = [args[@"radius"] doubleValue];
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addCircleRegionForMonitoringWithCenter(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref addCircleRegionForMonitoringWithCenter : center radius: radius customID: customID];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManager::addPolygonRegionForMonitoringWithCoordinatesCountcustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 列表参数
          NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
          CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
      
          for (int i = 0; i < coordinatesRefIdArray.count; i++) {
              NSValue* coordinatesValue = (NSValue*) HEAP_AmapLocationFluttify[[coordinatesRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordinatesItem;
              [coordinatesValue getValue:&coordinatesItem];
              coordinates[i] = coordinatesItem;
          }
          // jsonable参数
          NSInteger count = [args[@"count"] integerValue];
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addPolygonRegionForMonitoringWithCoordinates(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref addPolygonRegionForMonitoringWithCoordinates : coordinates count: count customID: customID];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManager::addKeywordPOIRegionForMonitoringWithKeywordPOITypecitysizecustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* keyword = (NSString*) args[@"keyword"];
          // jsonable参数
          NSString* type = (NSString*) args[@"type"];
          // jsonable参数
          NSString* city = (NSString*) args[@"city"];
          // jsonable参数
          NSInteger size = [args[@"size"] integerValue];
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addKeywordPOIRegionForMonitoringWithKeyword(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref addKeywordPOIRegionForMonitoringWithKeyword : keyword POIType: type city: city size: size customID: customID];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManager::addAroundPOIRegionForMonitoringWithLocationPointAroundRadiuskeywordPOITypesizecustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 结构体参数
          NSValue* locationPointValue = (NSValue*) HEAP_AmapLocationFluttify[@([args[@"locationPoint"] integerValue])];
          CLLocationCoordinate2D locationPoint;
          [locationPointValue getValue:&locationPoint];
          // jsonable参数
          NSInteger aroundRadius = [args[@"aroundRadius"] integerValue];
          // jsonable参数
          NSString* keyword = (NSString*) args[@"keyword"];
          // jsonable参数
          NSString* type = (NSString*) args[@"type"];
          // jsonable参数
          NSInteger size = [args[@"size"] integerValue];
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addAroundPOIRegionForMonitoringWithLocationPoint(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref addAroundPOIRegionForMonitoringWithLocationPoint : locationPoint aroundRadius: aroundRadius keyword: keyword POIType: type size: size customID: customID];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManager::addDistrictRegionForMonitoringWithDistrictNameCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* districtName = (NSString*) args[@"districtName"];
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addDistrictRegionForMonitoringWithDistrictName(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref addDistrictRegionForMonitoringWithDistrictName : districtName customID: customID];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManager::statusWithGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@([args[@"region"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::statusWithGeoFenceRegion(暂未实现参数打印)", @(refId));
      
          // 开始调用
          AMapGeoFenceRegionActiveStatus result = [ref statusWithGeoFenceRegion: region];
      
          // 调用结果
          // 返回值: Value
          methodResult(@(result));
      },
      @"AMapGeoFenceManager::geoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::geoFenceRegionsWithCustomID(暂未实现参数打印)", @(refId));
      
          // 开始调用
          NSArray* result = [ref geoFenceRegionsWithCustomID: customID];
      
          // 调用结果
          // 返回值: 列表
          NSMutableArray* refIdList = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [refIdList addObject: @(object.hash)];
              HEAP_AmapLocationFluttify[@([object hash])] = object;
          }
      
          methodResult(refIdList);
      },
      @"AMapGeoFenceManager::monitoringGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::monitoringGeoFenceRegionsWithCustomID(暂未实现参数打印)", @(refId));
      
          // 开始调用
          NSArray* result = [ref monitoringGeoFenceRegionsWithCustomID: customID];
      
          // 调用结果
          // 返回值: 列表
          NSMutableArray* refIdList = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [refIdList addObject: @(object.hash)];
              HEAP_AmapLocationFluttify[@([object hash])] = object;
          }
      
          methodResult(refIdList);
      },
      @"AMapGeoFenceManager::pausedGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::pausedGeoFenceRegionsWithCustomID(暂未实现参数打印)", @(refId));
      
          // 开始调用
          NSArray* result = [ref pausedGeoFenceRegionsWithCustomID: customID];
      
          // 调用结果
          // 返回值: 列表
          NSMutableArray* refIdList = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [refIdList addObject: @(object.hash)];
              HEAP_AmapLocationFluttify[@([object hash])] = object;
          }
      
          methodResult(refIdList);
      },
      @"AMapGeoFenceManager::pauseGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::pauseGeoFenceRegionsWithCustomID(暂未实现参数打印)", @(refId));
      
          // 开始调用
          NSArray* result = [ref pauseGeoFenceRegionsWithCustomID: customID];
      
          // 调用结果
          // 返回值: 列表
          NSMutableArray* refIdList = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [refIdList addObject: @(object.hash)];
              HEAP_AmapLocationFluttify[@([object hash])] = object;
          }
      
          methodResult(refIdList);
      },
      @"AMapGeoFenceManager::pauseTheGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@([args[@"region"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::pauseTheGeoFenceRegion(暂未实现参数打印)", @(refId));
      
          // 开始调用
          BOOL result = [ref pauseTheGeoFenceRegion: region];
      
          // 调用结果
          // 返回值: Value
          methodResult(@(result));
      },
      @"AMapGeoFenceManager::startGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::startGeoFenceRegionsWithCustomID(暂未实现参数打印)", @(refId));
      
          // 开始调用
          NSArray* result = [ref startGeoFenceRegionsWithCustomID: customID];
      
          // 调用结果
          // 返回值: 列表
          NSMutableArray* refIdList = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [refIdList addObject: @(object.hash)];
              HEAP_AmapLocationFluttify[@([object hash])] = object;
          }
      
          methodResult(refIdList);
      },
      @"AMapGeoFenceManager::startTheGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@([args[@"region"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::startTheGeoFenceRegion(暂未实现参数打印)", @(refId));
      
          // 开始调用
          BOOL result = [ref startTheGeoFenceRegion: region];
      
          // 调用结果
          // 返回值: Value
          methodResult(@(result));
      },
      @"AMapGeoFenceManager::removeTheGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@([args[@"region"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::removeTheGeoFenceRegion(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref removeTheGeoFenceRegion : region];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManager::removeGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::removeGeoFenceRegionsWithCustomID(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref removeGeoFenceRegionsWithCustomID : customID];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManager::removeAllGeoFenceRegions": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
      
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::removeAllGeoFenceRegions(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref removeAllGeoFenceRegions ];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@([args[@"manager"] integerValue])];
          // 引用参数
          CLLocationManager* locationManager = (CLLocationManager*) HEAP_AmapLocationFluttify[@([args[@"locationManager"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManagerDelegate@%@::amapGeoFenceManager(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref amapGeoFenceManager : manager doRequireLocationAuth: locationManager];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@([args[@"manager"] integerValue])];
          // 列表参数
          NSArray<NSNumber*>* regionsRefArray = (NSArray<NSNumber*> *) args[@"regions"];
          NSMutableArray<AMapGeoFenceRegion*>* regions = [NSMutableArray arrayWithCapacity:regionsRefArray.count];
          for (int i = 0; i < regions.count; i++) {
              AMapGeoFenceRegion* item = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[[regionsRefArray objectAtIndex:i]];
              [regions addObject:item];
          }
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
          // 引用参数
          NSError* error = (NSError*) HEAP_AmapLocationFluttify[@([args[@"error"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManagerDelegate@%@::amapGeoFenceManager(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref amapGeoFenceManager : manager didAddRegionForMonitoringFinished: regions customID: customID error: error];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@([args[@"manager"] integerValue])];
          // 引用参数
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@([args[@"region"] integerValue])];
          // jsonable参数
          NSString* customID = (NSString*) args[@"customID"];
          // 引用参数
          NSError* error = (NSError*) HEAP_AmapLocationFluttify[@([args[@"error"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapGeoFenceManagerDelegate@%@::amapGeoFenceManager(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref amapGeoFenceManager : manager didGeoFencesStatusChangedForRegion: region customID: customID error: error];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationRegion::initWithIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationRegion@%@::initWithIdentifier(暂未实现参数打印)", @(refId));
      
          // 开始调用
          AMapLocationRegion* result = [ref initWithIdentifier: identifier];
      
          // 调用结果
          // 返回值: 引用
          HEAP_AmapLocationFluttify[@(result.hash)] = result;
          methodResult(@(result.hash));
      },
      @"AMapLocationRegion::containsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 结构体参数
          NSValue* coordinateValue = (NSValue*) HEAP_AmapLocationFluttify[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationRegion@%@::containsCoordinate(暂未实现参数打印)", @(refId));
      
          // 开始调用
          BOOL result = [ref containsCoordinate: coordinate];
      
          // 调用结果
          // 返回值: Value
          methodResult(@(result));
      },
      @"AMapLocationCircleRegion::initWithCenterRadiusidentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 结构体参数
          NSValue* centerValue = (NSValue*) HEAP_AmapLocationFluttify[@([args[@"center"] integerValue])];
          CLLocationCoordinate2D center;
          [centerValue getValue:&center];
          // jsonable参数
          CLLocationDistance radius = [args[@"radius"] doubleValue];
          // jsonable参数
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationCircleRegion@%@::initWithCenter(暂未实现参数打印)", @(refId));
      
          // 开始调用
          AMapLocationCircleRegion* result = [ref initWithCenter: center radius: radius identifier: identifier];
      
          // 调用结果
          // 返回值: 引用
          HEAP_AmapLocationFluttify[@(result.hash)] = result;
          methodResult(@(result.hash));
      },
      @"AMapLocationPolygonRegion::initWithCoordinatesCountidentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 列表参数
          NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
          CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
      
          for (int i = 0; i < coordinatesRefIdArray.count; i++) {
              NSValue* coordinatesValue = (NSValue*) HEAP_AmapLocationFluttify[[coordinatesRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordinatesItem;
              [coordinatesValue getValue:&coordinatesItem];
              coordinates[i] = coordinatesItem;
          }
          // jsonable参数
          NSInteger count = [args[@"count"] integerValue];
          // jsonable参数
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationPolygonRegion@%@::initWithCoordinates(暂未实现参数打印)", @(refId));
      
          // 开始调用
          AMapLocationPolygonRegion* result = [ref initWithCoordinates: coordinates count: count identifier: identifier];
      
          // 调用结果
          // 返回值: 引用
          HEAP_AmapLocationFluttify[@(result.hash)] = result;
          methodResult(@(result.hash));
      },
      @"AMapLocationManager::headingAvailable": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
      
      
          // 调用对象引用
      
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManager::headingAvailable(暂未实现参数打印)");
      
          // 开始调用
          BOOL result = [AMapLocationManager headingAvailable];
      
          // 调用结果
          // 返回值: Value
          methodResult(@(result));
      },
      @"AMapLocationManager::startUpdatingHeading": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
      
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManager@%@::startUpdatingHeading(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref startUpdatingHeading ];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationManager::stopUpdatingHeading": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
      
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManager@%@::stopUpdatingHeading(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref stopUpdatingHeading ];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationManager::dismissHeadingCalibrationDisplay": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
      
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManager@%@::dismissHeadingCalibrationDisplay(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref dismissHeadingCalibrationDisplay ];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationManager::startUpdatingLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
      
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManager@%@::startUpdatingLocation(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref startUpdatingLocation ];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationManager::stopUpdatingLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
      
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManager@%@::stopUpdatingLocation(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref stopUpdatingLocation ];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapLocationManager* manager = (AMapLocationManager*) HEAP_AmapLocationFluttify[@([args[@"manager"] integerValue])];
          // 引用参数
          CLLocationManager* locationManager = (CLLocationManager*) HEAP_AmapLocationFluttify[@([args[@"locationManager"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref amapLocationManager : manager doRequireLocationAuth: locationManager];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidFailWithError": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapLocationManager* manager = (AMapLocationManager*) HEAP_AmapLocationFluttify[@([args[@"manager"] integerValue])];
          // 引用参数
          NSError* error = (NSError*) HEAP_AmapLocationFluttify[@([args[@"error"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref amapLocationManager : manager didFailWithError: error];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapLocationManager* manager = (AMapLocationManager*) HEAP_AmapLocationFluttify[@([args[@"manager"] integerValue])];
          // 枚举参数
          CLAuthorizationStatus status = (CLAuthorizationStatus) [args[@"status"] integerValue];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", @(refId));
      
          // 开始调用
          [ref amapLocationManager : manager didChangeAuthorizationStatus: status];
      
          // 调用结果
          // 无返回值
          methodResult(@"success");
      },
      @"AMapLocationManagerDelegate::amapLocationManagerShouldDisplayHeadingCalibration": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // 引用参数
          AMapLocationManager* manager = (AMapLocationManager*) HEAP_AmapLocationFluttify[@([args[@"manager"] integerValue])];
      
          // 调用对象引用
          NSInteger refId = [args[@"refId"] integerValue];
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP_AmapLocationFluttify[@(refId)];
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManagerShouldDisplayHeadingCalibration(暂未实现参数打印)", @(refId));
      
          // 开始调用
          BOOL result = [ref amapLocationManagerShouldDisplayHeadingCalibration: manager];
      
          // 调用结果
          // 返回值: Value
          methodResult(@(result));
      },
      @"AMapLocationPoint::locationWithLatitudeLongitude": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 参数
          // jsonable参数
          CGFloat lat = [args[@"lat"] floatValue];
          // jsonable参数
          CGFloat lon = [args[@"lon"] floatValue];
      
          // 调用对象引用
      
      
          // 日志打印
          NSLog(@"fluttify-objc: AMapLocationPoint::locationWithLatitude(暂未实现参数打印)");
      
          // 开始调用
          AMapLocationPoint* result = [AMapLocationPoint locationWithLatitude: lat longitude: lon];
      
          // 调用结果
          // 返回值: 引用
          HEAP_AmapLocationFluttify[@(result.hash)] = result;
          methodResult(@(result.hash));
      },
      @"AMapGeoFenceManager::get_activeAction": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::get_activeAction");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          AMapGeoFenceActiveAction result = ref.activeAction;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapGeoFenceManager::get_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::get_pausesLocationUpdatesAutomatically");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.pausesLocationUpdatesAutomatically;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapGeoFenceManager::get_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::get_allowsBackgroundLocationUpdates");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.allowsBackgroundLocationUpdates;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapGeoFenceManager::get_detectRiskOfFakeLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::get_detectRiskOfFakeLocation");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.detectRiskOfFakeLocation;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationRegion::get_identifier": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationRegion::get_identifier");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.identifier;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationRegion::get_notifyOnEntry": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationRegion::get_notifyOnEntry");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.notifyOnEntry;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationRegion::get_notifyOnExit": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationRegion::get_notifyOnExit");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.notifyOnExit;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationCircleRegion::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationCircleRegion::get_center");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CLLocationCoordinate2D result = ref.center;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP_AmapLocationFluttify[@(resultValue.hash)] = resultValue;
      
          methodResult(@(resultValue.hash));
      },
      
      @"AMapLocationCircleRegion::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationCircleRegion::get_radius");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CLLocationDistance result = ref.radius;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationPolygonRegion::get_coordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPolygonRegion::get_coordinates");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CLLocationCoordinate2D* result = ref.coordinates;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP_AmapLocationFluttify[@(resultValue.hash)] = resultValue;
      
          methodResult(@(resultValue.hash));
      },
      
      @"AMapLocationPolygonRegion::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPolygonRegion::get_count");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSInteger result = ref.count;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapGeoFenceRegion::get_identifier": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceRegion::get_identifier");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.identifier;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapGeoFenceRegion::get_customID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceRegion::get_customID");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.customID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapGeoFenceRegion::get_fenceStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceRegion::get_fenceStatus");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          AMapGeoFenceRegionStatus result = ref.fenceStatus;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapGeoFenceRegion::get_regionType": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceRegion::get_regionType");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          AMapGeoFenceRegionType result = ref.regionType;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapGeoFenceCircleRegion::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceCircleRegion::get_center");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceCircleRegion* ref = (AMapGeoFenceCircleRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CLLocationCoordinate2D result = ref.center;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP_AmapLocationFluttify[@(resultValue.hash)] = resultValue;
      
          methodResult(@(resultValue.hash));
      },
      
      @"AMapGeoFenceCircleRegion::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceCircleRegion::get_radius");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceCircleRegion* ref = (AMapGeoFenceCircleRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CLLocationDistance result = ref.radius;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapGeoFencePolygonRegion::get_coordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFencePolygonRegion::get_coordinates");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFencePolygonRegion* ref = (AMapGeoFencePolygonRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CLLocationCoordinate2D* result = ref.coordinates;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP_AmapLocationFluttify[@(resultValue.hash)] = resultValue;
      
          methodResult(@(resultValue.hash));
      },
      
      @"AMapGeoFencePolygonRegion::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFencePolygonRegion::get_count");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFencePolygonRegion* ref = (AMapGeoFencePolygonRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSInteger result = ref.count;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapGeoFencePOIRegion::get_POIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFencePOIRegion::get_POIItem");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFencePOIRegion* ref = (AMapGeoFencePOIRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          AMapLocationPOIItem* result = ref.POIItem;
      
          // 返回值: 引用
          HEAP_AmapLocationFluttify[@(result.hash)] = result;
          methodResult(@(result.hash));
      },
      
      @"AMapGeoFenceDistrictRegion::get_districtItem": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceDistrictRegion::get_districtItem");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceDistrictRegion* ref = (AMapGeoFenceDistrictRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          AMapLocationDistrictItem* result = ref.districtItem;
      
          // 返回值: 引用
          HEAP_AmapLocationFluttify[@(result.hash)] = result;
          methodResult(@(result.hash));
      },
      
      @"AMapLocationManager::get_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::get_distanceFilter");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CLLocationDistance result = ref.distanceFilter;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationManager::get_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::get_pausesLocationUpdatesAutomatically");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.pausesLocationUpdatesAutomatically;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationManager::get_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::get_allowsBackgroundLocationUpdates");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.allowsBackgroundLocationUpdates;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationManager::get_locationTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::get_locationTimeout");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSInteger result = ref.locationTimeout;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationManager::get_reGeocodeTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::get_reGeocodeTimeout");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSInteger result = ref.reGeocodeTimeout;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationManager::get_locatingWithReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::get_locatingWithReGeocode");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.locatingWithReGeocode;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationManager::get_reGeocodeLanguage": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::get_reGeocodeLanguage");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          AMapLocationReGeocodeLanguage result = ref.reGeocodeLanguage;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationManager::get_detectRiskOfFakeLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::get_detectRiskOfFakeLocation");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          BOOL result = ref.detectRiskOfFakeLocation;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationReGeocode::get_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_formattedAddress");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.formattedAddress;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_country": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_country");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.country;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_province");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.province;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_city");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.city;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_district");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.district;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_township": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_township");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.township;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_neighborhood");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.neighborhood;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_building": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_building");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.building;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_citycode");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_adcode");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_street": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_street");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.street;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_number": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_number");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.number;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_POIName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_POIName");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.POIName;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationReGeocode::get_AOIName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::get_AOIName");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.AOIName;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPoint::get_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPoint::get_latitude");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPoint* ref = (AMapLocationPoint*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CGFloat result = ref.latitude;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationPoint::get_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPoint::get_longitude");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPoint* ref = (AMapLocationPoint*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          CGFloat result = ref.longitude;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"AMapLocationPOIItem::get_pId": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_pId");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.pId;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPOIItem::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_name");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.name;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPOIItem::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_type");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.type;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPOIItem::get_typeCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_typeCode");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.typeCode;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPOIItem::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_address");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.address;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPOIItem::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_location");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          AMapLocationPoint* result = ref.location;
      
          // 返回值: 引用
          HEAP_AmapLocationFluttify[@(result.hash)] = result;
          methodResult(@(result.hash));
      },
      
      @"AMapLocationPOIItem::get_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_tel");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.tel;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPOIItem::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_province");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.province;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPOIItem::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_city");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.city;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationPOIItem::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::get_district");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.district;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapLocationDistrictItem::get_cityCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationDistrictItem::get_cityCode");
      
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationDistrictItem* ref = (AMapLocationDistrictItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          // 开始调用
          NSString* result = ref.cityCode;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"AMapGeoFenceManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::set_delegate");
      
          // 参数
      
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceManager::set_activeAction": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::set_activeAction");
      
          // 参数
          // 枚举参数
          AMapGeoFenceActiveAction activeAction = (AMapGeoFenceActiveAction) [args[@"activeAction"] integerValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.activeAction = activeAction;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceManager::set_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::set_pausesLocationUpdatesAutomatically");
      
          // 参数
          // jsonable参数
          BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceManager::set_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::set_allowsBackgroundLocationUpdates");
      
          // 参数
          // jsonable参数
          BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceManager::set_detectRiskOfFakeLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceManager::set_detectRiskOfFakeLocation");
      
          // 参数
          // jsonable参数
          BOOL detectRiskOfFakeLocation = [args[@"detectRiskOfFakeLocation"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.detectRiskOfFakeLocation = detectRiskOfFakeLocation;
          methodResult(@"success");
      },
      
      @"AMapLocationRegion::set_notifyOnEntry": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationRegion::set_notifyOnEntry");
      
          // 参数
          // jsonable参数
          BOOL notifyOnEntry = [args[@"notifyOnEntry"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.notifyOnEntry = notifyOnEntry;
          methodResult(@"success");
      },
      
      @"AMapLocationRegion::set_notifyOnExit": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationRegion::set_notifyOnExit");
      
          // 参数
          // jsonable参数
          BOOL notifyOnExit = [args[@"notifyOnExit"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.notifyOnExit = notifyOnExit;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceRegion::set_fenceStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceRegion::set_fenceStatus");
      
          // 参数
          // 枚举参数
          AMapGeoFenceRegionStatus fenceStatus = (AMapGeoFenceRegionStatus) [args[@"fenceStatus"] integerValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.fenceStatus = fenceStatus;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceRegion::set_regionType": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapGeoFenceRegion::set_regionType");
      
          // 参数
          // 枚举参数
          AMapGeoFenceRegionType regionType = (AMapGeoFenceRegionType) [args[@"regionType"] integerValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.regionType = regionType;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_delegate");
      
          // 参数
      
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_distanceFilter");
      
          // 参数
          // jsonable参数
          CLLocationDistance distanceFilter = [args[@"distanceFilter"] doubleValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.distanceFilter = distanceFilter;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_pausesLocationUpdatesAutomatically");
      
          // 参数
          // jsonable参数
          BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_allowsBackgroundLocationUpdates");
      
          // 参数
          // jsonable参数
          BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_locationTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_locationTimeout");
      
          // 参数
          // jsonable参数
          NSInteger locationTimeout = [args[@"locationTimeout"] integerValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.locationTimeout = locationTimeout;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_reGeocodeTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_reGeocodeTimeout");
      
          // 参数
          // jsonable参数
          NSInteger reGeocodeTimeout = [args[@"reGeocodeTimeout"] integerValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.reGeocodeTimeout = reGeocodeTimeout;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_locatingWithReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_locatingWithReGeocode");
      
          // 参数
          // jsonable参数
          BOOL locatingWithReGeocode = [args[@"locatingWithReGeocode"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.locatingWithReGeocode = locatingWithReGeocode;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_reGeocodeLanguage": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_reGeocodeLanguage");
      
          // 参数
          // 枚举参数
          AMapLocationReGeocodeLanguage reGeocodeLanguage = (AMapLocationReGeocodeLanguage) [args[@"reGeocodeLanguage"] integerValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.reGeocodeLanguage = reGeocodeLanguage;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_detectRiskOfFakeLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationManager::set_detectRiskOfFakeLocation");
      
          // 参数
          // jsonable参数
          BOOL detectRiskOfFakeLocation = [args[@"detectRiskOfFakeLocation"] boolValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationManager* ref = (AMapLocationManager*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.detectRiskOfFakeLocation = detectRiskOfFakeLocation;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_formattedAddress");
      
          // 参数
          // jsonable参数
          NSString* formattedAddress = (NSString*) args[@"formattedAddress"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.formattedAddress = formattedAddress;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_country": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_country");
      
          // 参数
          // jsonable参数
          NSString* country = (NSString*) args[@"country"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.country = country;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_province");
      
          // 参数
          // jsonable参数
          NSString* province = (NSString*) args[@"province"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_city");
      
          // 参数
          // jsonable参数
          NSString* city = (NSString*) args[@"city"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_district");
      
          // 参数
          // jsonable参数
          NSString* district = (NSString*) args[@"district"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.district = district;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_township": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_township");
      
          // 参数
          // jsonable参数
          NSString* township = (NSString*) args[@"township"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.township = township;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_neighborhood");
      
          // 参数
          // jsonable参数
          NSString* neighborhood = (NSString*) args[@"neighborhood"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.neighborhood = neighborhood;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_building");
      
          // 参数
          // jsonable参数
          NSString* building = (NSString*) args[@"building"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.building = building;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_citycode");
      
          // 参数
          // jsonable参数
          NSString* citycode = (NSString*) args[@"citycode"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_adcode");
      
          // 参数
          // jsonable参数
          NSString* adcode = (NSString*) args[@"adcode"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_street": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_street");
      
          // 参数
          // jsonable参数
          NSString* street = (NSString*) args[@"street"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.street = street;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_number": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_number");
      
          // 参数
          // jsonable参数
          NSString* number = (NSString*) args[@"number"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.number = number;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_POIName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_POIName");
      
          // 参数
          // jsonable参数
          NSString* POIName = (NSString*) args[@"POIName"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.POIName = POIName;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_AOIName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationReGeocode::set_AOIName");
      
          // 参数
          // jsonable参数
          NSString* AOIName = (NSString*) args[@"AOIName"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.AOIName = AOIName;
          methodResult(@"success");
      },
      
      @"AMapLocationPoint::set_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPoint::set_latitude");
      
          // 参数
          // jsonable参数
          CGFloat latitude = [args[@"latitude"] floatValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPoint* ref = (AMapLocationPoint*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.latitude = latitude;
          methodResult(@"success");
      },
      
      @"AMapLocationPoint::set_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPoint::set_longitude");
      
          // 参数
          // jsonable参数
          CGFloat longitude = [args[@"longitude"] floatValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPoint* ref = (AMapLocationPoint*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.longitude = longitude;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_pId": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_pId");
      
          // 参数
          // jsonable参数
          NSString* pId = (NSString*) args[@"pId"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.pId = pId;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_name");
      
          // 参数
          // jsonable参数
          NSString* name = (NSString*) args[@"name"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_type");
      
          // 参数
          // jsonable参数
          NSString* type = (NSString*) args[@"type"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_typeCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_typeCode");
      
          // 参数
          // jsonable参数
          NSString* typeCode = (NSString*) args[@"typeCode"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.typeCode = typeCode;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_address");
      
          // 参数
          // jsonable参数
          NSString* address = (NSString*) args[@"address"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.address = address;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_location");
      
          // 参数
          // 引用参数
          AMapLocationPoint* location = (AMapLocationPoint*) HEAP_AmapLocationFluttify[@([args[@"location"] integerValue])];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_tel");
      
          // 参数
          // jsonable参数
          NSString* tel = (NSString*) args[@"tel"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.tel = tel;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_province");
      
          // 参数
          // jsonable参数
          NSString* province = (NSString*) args[@"province"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_city");
      
          // 参数
          // jsonable参数
          NSString* city = (NSString*) args[@"city"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationPOIItem::set_district");
      
          // 参数
          // jsonable参数
          NSString* district = (NSString*) args[@"district"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.district = district;
          methodResult(@"success");
      },
      
      @"AMapLocationDistrictItem::set_cityCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"AMapLocationDistrictItem::set_cityCode");
      
          // 参数
          // jsonable参数
          NSString* cityCode = (NSString*) args[@"cityCode"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          AMapLocationDistrictItem* ref = (AMapLocationDistrictItem*) HEAP_AmapLocationFluttify[@(refId)];
      
          ref.cityCode = cityCode;
          methodResult(@"success");
      },
      
      @"RefClass::isKindOfAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFenceManager class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationCircleRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationPolygonRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFenceRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFenceCircleRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFencePolygonRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFencePOIRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFenceDistrictRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationManager class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationReGeocode class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationPoint class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationPOIItem class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationDistrictItem class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::asAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapGeoFenceManager *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapLocationRegion *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapLocationCircleRegion *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapLocationPolygonRegion *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapGeoFenceRegion *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapGeoFenceCircleRegion *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapGeoFencePolygonRegion *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapGeoFencePOIRegion *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapGeoFenceDistrictRegion *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapLocationManager *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapLocationReGeocode *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapLocationPoint *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapLocationPOIItem *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP_AmapLocationFluttify[@(refId)];
      
          // 转型
          ref = (AMapLocationDistrictItem *) ref;
          // 放回HEAP_AmapLocationFluttify
          HEAP_AmapLocationFluttify[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"ObjectFactory::createAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapGeoFenceManager");
      
          AMapGeoFenceManager* ref = [[AMapGeoFenceManager alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapLocationRegion");
      
          AMapLocationRegion* ref = [[AMapLocationRegion alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapLocationCircleRegion");
      
          AMapLocationCircleRegion* ref = [[AMapLocationCircleRegion alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapLocationPolygonRegion");
      
          AMapLocationPolygonRegion* ref = [[AMapLocationPolygonRegion alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapGeoFenceRegion");
      
          AMapGeoFenceRegion* ref = [[AMapGeoFenceRegion alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapGeoFenceCircleRegion");
      
          AMapGeoFenceCircleRegion* ref = [[AMapGeoFenceCircleRegion alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapGeoFencePolygonRegion");
      
          AMapGeoFencePolygonRegion* ref = [[AMapGeoFencePolygonRegion alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapGeoFencePOIRegion");
      
          AMapGeoFencePOIRegion* ref = [[AMapGeoFencePOIRegion alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapGeoFenceDistrictRegion");
      
          AMapGeoFenceDistrictRegion* ref = [[AMapGeoFenceDistrictRegion alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapLocationManager");
      
          AMapLocationManager* ref = [[AMapLocationManager alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapLocationReGeocode");
      
          AMapLocationReGeocode* ref = [[AMapLocationReGeocode alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapLocationPoint");
      
          AMapLocationPoint* ref = [[AMapLocationPoint alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapLocationPOIItem");
      
          AMapLocationPOIItem* ref = [[AMapLocationPOIItem alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
      @"ObjectFactory::createAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createAMapLocationDistrictItem");
      
          AMapLocationDistrictItem* ref = [[AMapLocationDistrictItem alloc] init];
          HEAP_AmapLocationFluttify[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
      },
      
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  // 栈容器
  STACK_AmapLocationFluttify = @{}.mutableCopy;
  // 堆容器
  HEAP_AmapLocationFluttify = @{}.mutableCopy;

  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/amap_location_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[AmapLocationFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];
  // 是否一个对象
  if ([@"ObjectFactory::release" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber *) args[@"refId"];

    NSLog(@"ObjectFactory::释放对象: %@@%@", NSStringFromClass([HEAP_AmapLocationFluttify[refId] class]), refId);

    [HEAP_AmapLocationFluttify removeObjectForKey:refId];
    methodResult(@"success");

    NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
  }
  // 清空堆
  else if ([@"ObjectFactory::clearHeap" isEqualToString:methodCall.method]) {
    NSLog(@"ObjectFactory::清空堆");

    [HEAP_AmapLocationFluttify removeAllObjects];
    methodResult(@"success");

    NSLog(@"HEAP_AmapLocationFluttify: %@", HEAP_AmapLocationFluttify);
  }
  // 压入栈
  else if ([@"ObjectFactory::pushStack" isEqualToString:methodCall.method]) {
    NSString* name = (NSString*) args[@"name"];
    NSNumber* refId = (NSNumber*) args[@"refId"];

    // todo release去掉日志
    NSLog(@"ObjectFactory::压入栈 %@@%@", NSStringFromClass([HEAP_AmapLocationFluttify[refId] class]), refId);

    STACK_AmapLocationFluttify[name] = HEAP_AmapLocationFluttify[refId];

    methodResult(@"success");

    NSLog(@"STACK_AmapLocationFluttify: %@", STACK_AmapLocationFluttify);
  }
  // 压入栈 jsonable
  else if ([@"ObjectFactory::pushStackJsonable" isEqualToString:methodCall.method]) {
    NSString* name = (NSString*) args[@"name"];
    NSObject* data = (NSObject*) args[@"data"];

    // todo release去掉日志
    NSLog(@"ObjectFactory::压入栈 %@", data);

    STACK_AmapLocationFluttify[name] = data;

    methodResult(@"success");

    NSLog(@"STACK_AmapLocationFluttify: %@", STACK_AmapLocationFluttify);
  }
  // 清空栈
  else if ([@"ObjectFactory::clearStack" isEqualToString:methodCall.method]) {
    NSLog(@"ObjectFactory::清空栈");

    [STACK_AmapLocationFluttify removeAllObjects];
    methodResult(@"success");

    NSLog(@"STACK_AmapLocationFluttify: %@", STACK_AmapLocationFluttify);
  }
  // 创建CLLocationCoordinate2D
  else if ([@"ObjectFactory::createCLLocationCoordinate2D" isEqualToString:methodCall.method]) {
    CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
    CLLocationDegrees longitude = [args[@"longitude"] doubleValue];

    CLLocationCoordinate2D data = CLLocationCoordinate2DMake(latitude, longitude);

    NSValue* dataValue = [NSValue value:&data withObjCType:@encode(CLLocationCoordinate2D)];
    HEAP_AmapLocationFluttify[@(dataValue.hash)] = dataValue;

    methodResult(@(dataValue.hash));
  }
  // CLLocationCoordinate2D获取latitude
  else if ([@"CLLocationCoordinate2D::get_latitude" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    NSValue* dataValue = (NSValue*) HEAP_AmapLocationFluttify[refId];

    CLLocationCoordinate2D _structValue;
    [dataValue getValue:&_structValue];

    methodResult(@(_structValue.latitude));
  }
  // CLLocationCoordinate2D获取longitude
  else if ([@"CLLocationCoordinate2D::get_longitude" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    NSValue* dataValue = (NSValue*) HEAP_AmapLocationFluttify[refId];

    CLLocationCoordinate2D _structValue;
    [dataValue getValue:&_structValue];

    methodResult(@(_structValue.longitude));
  }
  // 创建UIImage
  else if ([@"ObjectFactory::createUIImage" isEqualToString:methodCall.method]) {
    FlutterStandardTypedData* bitmapBytes = (FlutterStandardTypedData*) args[@"bitmapBytes"];

    UIImage* bitmap = [UIImage imageWithData:bitmapBytes.data];

    HEAP_AmapLocationFluttify[@(bitmap.hash)] = bitmap;

    methodResult(@(bitmap.hash));
  } else {
    if (_handlerMap[methodCall.method] != nil) {
      _handlerMap[methodCall.method](_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }
}

// 委托方法们
- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager doRequireLocationAuth: (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* arglocationManager = @(locationManager.hash);
  HEAP_AmapLocationFluttify[arglocationManager] = locationManager;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth" arguments:@{@"manager": argmanager, @"locationManager": arglocationManager}];
  
}

- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager didAddRegionForMonitoringFinished: (NSArray<AMapGeoFenceRegion*>*)regions customID: (NSString*)customID error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 列表回调参数
  NSMutableArray<NSNumber*>* argregions = [NSMutableArray arrayWithCapacity:regions.count];
  for (int i = 0; i < regions.count; i++) {
      NSObject* item = ((NSObject*) [regions objectAtIndex:i]);
      // 返回给dart端的数据
      argregions[i] = @(item.hash);
      // 放到HEAP_AmapLocationFluttify中的数据
      HEAP_AmapLocationFluttify[@(item.hash)] = item;
  }
  // jsonable回调参数
  NSString* argcustomID = customID;
  // 引用回调参数
  NSNumber* argerror = @(error.hash);
  HEAP_AmapLocationFluttify[argerror] = error;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror" arguments:@{@"manager": argmanager, @"regions": argregions, @"customID": argcustomID, @"error": argerror}];
  
}

- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager didGeoFencesStatusChangedForRegion: (AMapGeoFenceRegion*)region customID: (NSString*)customID error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* argregion = @(region.hash);
  HEAP_AmapLocationFluttify[argregion] = region;
  // jsonable回调参数
  NSString* argcustomID = customID;
  // 引用回调参数
  NSNumber* argerror = @(error.hash);
  HEAP_AmapLocationFluttify[argerror] = error;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror" arguments:@{@"manager": argmanager, @"region": argregion, @"customID": argcustomID, @"error": argerror}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager doRequireLocationAuth: (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* arglocationManager = @(locationManager.hash);
  HEAP_AmapLocationFluttify[arglocationManager] = locationManager;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth" arguments:@{@"manager": argmanager, @"locationManager": arglocationManager}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didFailWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidFailWithError");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* argerror = @(error.hash);
  HEAP_AmapLocationFluttify[argerror] = error;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidFailWithError" arguments:@{@"manager": argmanager, @"error": argerror}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateLocation: (CLLocation*)location
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocation");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* arglocation = @(location.hash);
  HEAP_AmapLocationFluttify[arglocation] = location;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocation" arguments:@{@"manager": argmanager, @"location": arglocation}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateLocation: (CLLocation*)location reGeocode: (AMapLocationReGeocode*)reGeocode
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocationreGeocode");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* arglocation = @(location.hash);
  HEAP_AmapLocationFluttify[arglocation] = location;
  // 引用回调参数
  NSNumber* argreGeocode = @(reGeocode.hash);
  HEAP_AmapLocationFluttify[argreGeocode] = reGeocode;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocationreGeocode" arguments:@{@"manager": argmanager, @"location": arglocation, @"reGeocode": argreGeocode}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didChangeAuthorizationStatus: (CLAuthorizationStatus)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 枚举回调参数
  NSNumber* argstatus = @((NSInteger) status);

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus" arguments:@{@"manager": argmanager, @"status": argstatus}];
  
}

- (BOOL)amapLocationManagerShouldDisplayHeadingCalibration : (AMapLocationManager*)manager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerShouldDisplayHeadingCalibration");

  // 构造可以直接传输的参数
  

  // __block #__callback_result_type__# _callbackResult = nil;
  // [channel invokeMethod:@"#__callback_method__#"
  //             arguments:@{#__callback_args__#}
  //                result:^(id result) {
  //                  #__raw_callback_result__#
  //                }];
  //
  // while (_callbackResult == nil) {
  //   // _callbackResult有值前, 空转
  // }
  //
  // #__struct_value__#
  //
  // return #__callback_result__#;
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return 0;
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateHeading: (CLHeading*)newHeading
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateHeading");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* argnewHeading = @(newHeading.hash);
  HEAP_AmapLocationFluttify[argnewHeading] = newHeading;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateHeading" arguments:@{@"manager": argmanager, @"newHeading": argnewHeading}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didStartMonitoringForRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidStartMonitoringForRegion");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* argregion = @(region.hash);
  HEAP_AmapLocationFluttify[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidStartMonitoringForRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didEnterRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidEnterRegion");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* argregion = @(region.hash);
  HEAP_AmapLocationFluttify[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidEnterRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didExitRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidExitRegion");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* argregion = @(region.hash);
  HEAP_AmapLocationFluttify[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidExitRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didDetermineState: (AMapLocationRegionState)state forRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidDetermineStateforRegion");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 枚举回调参数
  NSNumber* argstate = @((NSInteger) state);
  // 引用回调参数
  NSNumber* argregion = @(region.hash);
  HEAP_AmapLocationFluttify[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidDetermineStateforRegion" arguments:@{@"manager": argmanager, @"state": argstate, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager monitoringDidFailForRegion: (AMapLocationRegion*)region withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"AMapLocationManagerDelegate::amapLocationManagerMonitoringDidFailForRegionwithError");

  // 构造可以直接传输的参数
  // 引用回调参数
  NSNumber* argmanager = @(manager.hash);
  HEAP_AmapLocationFluttify[argmanager] = manager;
  // 引用回调参数
  NSNumber* argregion = @(region.hash);
  HEAP_AmapLocationFluttify[argregion] = region;
  // 引用回调参数
  NSNumber* argerror = @(error.hash);
  HEAP_AmapLocationFluttify[argerror] = error;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerMonitoringDidFailForRegionwithError" arguments:@{@"manager": argmanager, @"region": argregion, @"error": argerror}];
  
}


@end